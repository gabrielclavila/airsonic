/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 14:50:31 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.AlbumID3;
import org.subsonic.restapi.ArtistID3;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.Starred2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Starred2_ESTest extends Starred2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      Child child0 = new Child();
      linkedList0.add(child0);
      starred2_0.song = (List<Child>) linkedList0;
      List<Child> list0 = starred2_0.getSong();
      assertTrue(list0.contains(child0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      LinkedList<ArtistID3> linkedList0 = new LinkedList<ArtistID3>();
      starred2_0.artist = (List<ArtistID3>) linkedList0;
      ArtistID3 artistID3_0 = new ArtistID3();
      linkedList0.add(artistID3_0);
      List<ArtistID3> list0 = starred2_0.getArtist();
      assertNotNull(list0);
      assertTrue(list0.contains(artistID3_0));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      LinkedList<AlbumID3> linkedList0 = new LinkedList<AlbumID3>();
      starred2_0.album = (List<AlbumID3>) linkedList0;
      AlbumID3 albumID3_0 = new AlbumID3();
      linkedList0.add(albumID3_0);
      List<AlbumID3> list0 = starred2_0.getAlbum();
      assertNotNull(list0);
      assertTrue(list0.contains(albumID3_0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      List<Child> list0 = starred2_0.getSong();
      List<Child> list1 = starred2_0.getSong();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      List<AlbumID3> list0 = starred2_0.getAlbum();
      List<AlbumID3> list1 = starred2_0.getAlbum();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Starred2 starred2_0 = new Starred2();
      List<ArtistID3> list0 = starred2_0.getArtist();
      List<ArtistID3> list1 = starred2_0.getArtist();
      assertNotNull(list1);
      assertSame(list1, list0);
  }
}
