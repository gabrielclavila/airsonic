/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 14:29:34 GMT 2024
 */

package com.sonos.services._1;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sonos.services._1.AddToContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AddToContainer_ESTest extends AddToContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.setUpdateId("%1Ab");
      String string0 = addToContainer0.getUpdateId();
      assertEquals("%1Ab", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.parentId = "";
      String string0 = addToContainer0.getParentId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.index = (-1271);
      int int0 = addToContainer0.getIndex();
      assertEquals((-1271), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.setId("=E@W'%c?m^&RC;f");
      String string0 = addToContainer0.getId();
      assertEquals("=E@W'%c?m^&RC;f", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.id = "";
      String string0 = addToContainer0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.setUpdateId("");
      String string0 = addToContainer0.getUpdateId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      int int0 = addToContainer0.getIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.setParentId("com.sonos.services._1.AddToContainer");
      String string0 = addToContainer0.getParentId();
      assertEquals("com.sonos.services._1.AddToContainer", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      String string0 = addToContainer0.getParentId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      String string0 = addToContainer0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      addToContainer0.setIndex(1);
      int int0 = addToContainer0.getIndex();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AddToContainer addToContainer0 = new AddToContainer();
      String string0 = addToContainer0.getUpdateId();
      assertNull(string0);
  }
}
