/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:51:11 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.MediaType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Child_ESTest extends Child_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-558));
      child0.setOriginalHeight(integer0);
      assertNull(child0.getTranscodedContentType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Child child0 = new Child();
      child0.setAlbumId("#u!6/");
      assertNull(child0.getParent());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-219));
      child0.setDiscNumber(integer0);
      assertNull(child0.isIsVideo());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Child child0 = new Child();
      child0.setCoverArt("");
      assertFalse(child0.isIsDir());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Child child0 = new Child();
      child0.setTitle("org.subsonic.restapi.Child");
      assertNull(child0.getBitRate());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Child child0 = new Child();
      child0.setIsDir(true);
      assertTrue(child0.isIsDir());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Child child0 = new Child();
      Boolean boolean0 = Boolean.TRUE;
      child0.setIsVideo(boolean0);
      Boolean boolean1 = child0.isIsVideo();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Child child0 = new Child();
      Boolean boolean0 = new Boolean(false);
      child0.setIsVideo(boolean0);
      Boolean boolean1 = child0.isIsVideo();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Child child0 = new Child();
      child0.isDir = true;
      boolean boolean0 = child0.isIsDir();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.year = integer0;
      Integer integer1 = child0.getYear();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-219));
      child0.year = integer0;
      Integer integer1 = child0.getYear();
      assertEquals((-219), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(2038);
      child0.setYear(integer0);
      Integer integer1 = child0.getYear();
      assertEquals(2038, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.userRating = integer0;
      Integer integer1 = child0.getUserRating();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(1);
      child0.userRating = integer0;
      Integer integer1 = child0.getUserRating();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-558));
      child0.setUserRating(integer0);
      Integer integer1 = child0.getUserRating();
      assertEquals((-558), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Child child0 = new Child();
      child0.setTranscodedSuffix("org.subsonic.restapi.Child");
      String string0 = child0.getTranscodedSuffix();
      assertEquals("org.subsonic.restapi.Child", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Child child0 = new Child();
      child0.setTranscodedSuffix("");
      String string0 = child0.getTranscodedSuffix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Child child0 = new Child();
      child0.setTranscodedContentType("MUSIC");
      String string0 = child0.getTranscodedContentType();
      assertEquals("MUSIC", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Child child0 = new Child();
      child0.transcodedContentType = "";
      String string0 = child0.getTranscodedContentType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = Integer.getInteger((String) null, 0);
      child0.setTrack(integer0);
      Integer integer1 = child0.getTrack();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(1);
      child0.track = integer0;
      Integer integer1 = child0.getTrack();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-1108));
      child0.setTrack(integer0);
      Integer integer1 = child0.getTrack();
      assertEquals((-1108), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Child child0 = new Child();
      child0.title = "66d%Xgd$V0";
      String string0 = child0.getTitle();
      assertEquals("66d%Xgd$V0", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Child child0 = new Child();
      child0.title = "";
      String string0 = child0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Child child0 = new Child();
      child0.setSuffix("`ol| v7fp;/C\")]");
      String string0 = child0.getSuffix();
      assertEquals("`ol| v7fp;/C\")]", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Child child0 = new Child();
      child0.suffix = "";
      String string0 = child0.getSuffix();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(0);
      child0.size = long0;
      Long long1 = child0.getSize();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(336);
      child0.size = long0;
      Long long1 = child0.getSize();
      assertEquals(336L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long((-1));
      child0.setSize(long0);
      Long long1 = child0.getSize();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(0L);
      child0.setPlayCount(long0);
      Long long1 = child0.getPlayCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(45L);
      child0.playCount = long0;
      Long long1 = child0.getPlayCount();
      assertEquals(45L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long((-2916L));
      child0.setPlayCount(long0);
      Long long1 = child0.getPlayCount();
      assertEquals((-2916L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Child child0 = new Child();
      child0.setPath("fv&[;{");
      String string0 = child0.getPath();
      assertEquals("fv&[;{", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Child child0 = new Child();
      child0.path = "";
      String string0 = child0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Child child0 = new Child();
      child0.setParent("]O}m/bC5A~aP2o7!");
      String string0 = child0.getParent();
      assertEquals("]O}m/bC5A~aP2o7!", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Child child0 = new Child();
      child0.setParent("");
      String string0 = child0.getParent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(2038);
      child0.setOriginalWidth(integer0);
      Integer integer1 = child0.getOriginalWidth();
      assertEquals(2038, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.originalWidth = integer0;
      Integer integer1 = child0.getOriginalWidth();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-1494));
      child0.setOriginalWidth(integer0);
      Integer integer1 = child0.getOriginalWidth();
      assertEquals((-1494), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(1);
      child0.originalHeight = integer0;
      Integer integer1 = child0.getOriginalHeight();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-1));
      child0.originalHeight = integer0;
      Integer integer1 = child0.getOriginalHeight();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Child child0 = new Child();
      child0.setId("oi*5Mi");
      String string0 = child0.getId();
      assertEquals("oi*5Mi", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Child child0 = new Child();
      child0.setId("");
      String string0 = child0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Child child0 = new Child();
      child0.setGenre("#u!6/");
      String string0 = child0.getGenre();
      assertEquals("#u!6/", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.duration = integer0;
      Integer integer1 = child0.getDuration();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-940));
      child0.duration = integer0;
      Integer integer1 = child0.getDuration();
      assertEquals((-940), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(2790);
      child0.setDuration(integer0);
      Integer integer1 = child0.getDuration();
      assertEquals(2790, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(2211);
      child0.discNumber = integer0;
      Integer integer1 = child0.getDiscNumber();
      assertEquals(2211, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.discNumber = integer0;
      Integer integer1 = child0.getDiscNumber();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-2766));
      child0.discNumber = integer0;
      Integer integer1 = child0.getDiscNumber();
      assertEquals((-2766), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Child child0 = new Child();
      child0.coverArt = "]A}O.*PKP;SeW|@";
      String string0 = child0.getCoverArt();
      assertEquals("]A}O.*PKP;SeW|@", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Child child0 = new Child();
      child0.coverArt = "";
      String string0 = child0.getCoverArt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Child child0 = new Child();
      child0.setContentType("dxETb:xf'f");
      String string0 = child0.getContentType();
      assertEquals("dxETb:xf'f", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Child child0 = new Child();
      child0.setContentType("");
      String string0 = child0.getContentType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(0L);
      child0.setBookmarkPosition(long0);
      Long long1 = child0.getBookmarkPosition();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long(105L);
      child0.bookmarkPosition = long0;
      Long long1 = child0.getBookmarkPosition();
      assertEquals(105L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = new Long((-16L));
      child0.setBookmarkPosition(long0);
      Long long1 = child0.getBookmarkPosition();
      assertEquals((-16L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = Integer.getInteger("b", 2592);
      child0.setBitRate(integer0);
      Integer integer1 = child0.getBitRate();
      assertEquals(2592, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer(0);
      child0.setBitRate(integer0);
      Integer integer1 = child0.getBitRate();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-3279));
      child0.setBitRate(integer0);
      Integer integer1 = child0.getBitRate();
      assertEquals((-3279), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = new Integer((-558));
      child0.bitRate = integer0;
      Integer integer1 = child0.getBitRate();
      assertEquals((-558), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Child child0 = new Child();
      Double double0 = new Double(0.0);
      child0.averageRating = double0;
      Double double1 = child0.getAverageRating();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Child child0 = new Child();
      Double double0 = new Double(1050.602);
      child0.setAverageRating(double0);
      Double double1 = child0.getAverageRating();
      assertEquals(1050.602, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Child child0 = new Child();
      Double double0 = new Double((-1.0));
      child0.setAverageRating(double0);
      Double double1 = child0.getAverageRating();
      assertEquals((-1.0), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Child child0 = new Child();
      child0.setArtistId("cAyq2VtIX ");
      String string0 = child0.getArtistId();
      assertEquals("cAyq2VtIX ", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Child child0 = new Child();
      child0.setArtistId("");
      String string0 = child0.getArtistId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Child child0 = new Child();
      child0.setArtist("#u!6/");
      String string0 = child0.getArtist();
      assertEquals("#u!6/", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Child child0 = new Child();
      child0.setArtist("");
      String string0 = child0.getArtist();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Child child0 = new Child();
      child0.albumId = "org.subsonic.restapi.Child";
      String string0 = child0.getAlbumId();
      assertEquals("org.subsonic.restapi.Child", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Child child0 = new Child();
      child0.albumId = "";
      String string0 = child0.getAlbumId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Child child0 = new Child();
      child0.album = "FyR";
      String string0 = child0.getAlbum();
      assertEquals("FyR", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Child child0 = new Child();
      child0.setAlbum("");
      String string0 = child0.getAlbum();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getYear();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Child child0 = new Child();
      Double double0 = child0.getAverageRating();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = child0.getBookmarkPosition();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getOriginalHeight();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getTranscodedContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Child child0 = new Child();
      XMLGregorianCalendar xMLGregorianCalendar0 = child0.getStarred();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getTrack();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getUserRating();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getDiscNumber();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Child child0 = new Child();
      MediaType mediaType0 = MediaType.AUDIOBOOK;
      child0.setType(mediaType0);
      MediaType mediaType1 = child0.getType();
      assertEquals(MediaType.AUDIOBOOK, mediaType1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Child child0 = new Child();
      child0.getType();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Child child0 = new Child();
      child0.setStarred((XMLGregorianCalendar) null);
      assertNull(child0.getBitRate());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getBitRate();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getArtist();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getAlbumId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getOriginalWidth();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Child child0 = new Child();
      child0.setGenre("");
      String string0 = child0.getGenre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Child child0 = new Child();
      Integer integer0 = child0.getDuration();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getCoverArt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = child0.getSize();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getGenre();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getContentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Child child0 = new Child();
      Long long0 = child0.getPlayCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Child child0 = new Child();
      boolean boolean0 = child0.isIsDir();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Child child0 = new Child();
      Boolean boolean0 = child0.isIsVideo();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getParent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getAlbum();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getArtistId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Child child0 = new Child();
      child0.setCreated((XMLGregorianCalendar) null);
      assertNull(child0.getPlayCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Child child0 = new Child();
      String string0 = child0.getTranscodedSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Child child0 = new Child();
      XMLGregorianCalendar xMLGregorianCalendar0 = child0.getCreated();
      assertNull(xMLGregorianCalendar0);
  }
}
