/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 11 00:24:52 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Artist;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.Index;
import org.subsonic.restapi.Indexes;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Indexes_ESTest extends Indexes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      LinkedList<Artist> linkedList0 = new LinkedList<Artist>();
      indexes0.shortcut = (List<Artist>) linkedList0;
      Artist artist0 = new Artist();
      linkedList0.add(artist0);
      List<Artist> list0 = indexes0.getShortcut();
      assertNotNull(list0);
      assertTrue(list0.contains(artist0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      indexes0.setLastModified(1689L);
      long long0 = indexes0.getLastModified();
      assertEquals(1689L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      indexes0.lastModified = (-1L);
      long long0 = indexes0.getLastModified();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      LinkedList<Index> linkedList0 = new LinkedList<Index>();
      Index index0 = new Index();
      linkedList0.add(index0);
      indexes0.index = (List<Index>) linkedList0;
      List<Index> list0 = indexes0.getIndex();
      assertTrue(list0.contains(index0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      indexes0.ignoredArticles = "tvJKP";
      String string0 = indexes0.getIgnoredArticles();
      assertEquals("tvJKP", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      indexes0.setIgnoredArticles("");
      String string0 = indexes0.getIgnoredArticles();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      indexes0.child = (List<Child>) linkedList0;
      Child child0 = new Child();
      linkedList0.add(child0);
      List<Child> list0 = indexes0.getChild();
      assertTrue(list0.contains(child0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      List<Child> list0 = indexes0.getChild();
      List<Child> list1 = indexes0.getChild();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      List<Index> list0 = indexes0.getIndex();
      List<Index> list1 = indexes0.getIndex();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      List<Artist> list0 = indexes0.getShortcut();
      List<Artist> list1 = indexes0.getShortcut();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      long long0 = indexes0.getLastModified();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Indexes indexes0 = new Indexes();
      String string0 = indexes0.getIgnoredArticles();
      assertNull(string0);
  }
}
