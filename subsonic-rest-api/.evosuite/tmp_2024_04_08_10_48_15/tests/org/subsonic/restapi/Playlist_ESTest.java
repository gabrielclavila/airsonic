/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:42:00 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Playlist;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Playlist_ESTest extends Playlist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setName("W");
      assertEquals(0, playlist0.getSongCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setOwner("=?j Z5N-+npQ");
      playlist0.setName((String) null);
      assertNull(playlist0.getCoverArt());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      Boolean boolean0 = Boolean.TRUE;
      playlist0._public = boolean0;
      Boolean boolean1 = playlist0.isPublic();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      Boolean boolean0 = Boolean.FALSE;
      playlist0.setPublic(boolean0);
      Boolean boolean1 = playlist0.isPublic();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setSongCount(220);
      int int0 = playlist0.getSongCount();
      assertEquals(220, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setSongCount((-3550));
      int int0 = playlist0.getSongCount();
      assertEquals((-3550), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.owner = "qizZ)>Hg_L*&s";
      String string0 = playlist0.getOwner();
      assertEquals("qizZ)>Hg_L*&s", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.owner = "";
      String string0 = playlist0.getOwner();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.name = "G)Y$T.8BPC";
      String string0 = playlist0.getName();
      assertEquals("G)Y$T.8BPC", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.name = "";
      String string0 = playlist0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.id = "";
      String string0 = playlist0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setDuration(1520);
      int int0 = playlist0.getDuration();
      assertEquals(1520, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setDuration((-1));
      int int0 = playlist0.getDuration();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setCoverArt("pwZf;S.}L");
      String string0 = playlist0.getCoverArt();
      assertEquals("pwZf;S.}L", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setCoverArt("");
      String string0 = playlist0.getCoverArt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.comment = "";
      String string0 = playlist0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      playlist0.allowedUser = (List<String>) linkedList0;
      linkedList0.add((String) null);
      List<String> list0 = playlist0.getAllowedUser();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.getAllowedUser();
      List<String> list0 = playlist0.getAllowedUser();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setChanged((XMLGregorianCalendar) null);
      assertNull(playlist0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      XMLGregorianCalendar xMLGregorianCalendar0 = playlist0.getCreated();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      int int0 = playlist0.getDuration();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setId("D.a");
      String string0 = playlist0.getId();
      assertEquals("D.a", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setCreated((XMLGregorianCalendar) null);
      assertNull(playlist0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      Boolean boolean0 = playlist0.isPublic();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getCoverArt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      int int0 = playlist0.getSongCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      XMLGregorianCalendar xMLGregorianCalendar0 = playlist0.getChanged();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setComment("D.a");
      String string0 = playlist0.getComment();
      assertEquals("D.a", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getOwner();
      assertNull(string0);
  }
}
