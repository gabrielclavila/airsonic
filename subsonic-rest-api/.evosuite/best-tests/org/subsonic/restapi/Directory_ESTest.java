/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:48:03 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.Directory;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Directory_ESTest extends Directory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Directory directory0 = new Directory();
      Integer integer0 = new Integer((-139));
      directory0.setUserRating(integer0);
      assertNull(directory0.getId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Directory directory0 = new Directory();
      Integer integer0 = new Integer(0);
      directory0.userRating = integer0;
      Integer integer1 = directory0.getUserRating();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Directory directory0 = new Directory();
      Integer integer0 = Integer.valueOf(2);
      directory0.userRating = integer0;
      Integer integer1 = directory0.getUserRating();
      assertEquals(2, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Directory directory0 = new Directory();
      Integer integer0 = new Integer((-1));
      directory0.userRating = integer0;
      Integer integer1 = directory0.getUserRating();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Directory directory0 = new Directory();
      Long long0 = new Long(0L);
      directory0.playCount = long0;
      Long long1 = directory0.getPlayCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Directory directory0 = new Directory();
      Long long0 = new Long((-1717L));
      directory0.setPlayCount(long0);
      Long long1 = directory0.getPlayCount();
      assertEquals((-1717L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Directory directory0 = new Directory();
      Long long0 = new Long(144L);
      directory0.playCount = long0;
      Long long1 = directory0.getPlayCount();
      assertEquals(144L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.setParent("d.b{.");
      String string0 = directory0.getParent();
      assertEquals("d.b{.", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.setParent("");
      String string0 = directory0.getParent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.name = "*~mS";
      String string0 = directory0.getName();
      assertEquals("*~mS", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.setName("");
      String string0 = directory0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.id = "[NT#Lv)8`IR(l";
      String string0 = directory0.getId();
      assertEquals("[NT#Lv)8`IR(l", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.setId("");
      String string0 = directory0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Directory directory0 = new Directory();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      directory0.child = (List<Child>) linkedList0;
      linkedList0.add((Child) null);
      List<Child> list0 = directory0.getChild();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Directory directory0 = new Directory();
      Double double0 = new Double((-974.491275));
      directory0.setAverageRating(double0);
      Double double1 = directory0.getAverageRating();
      assertEquals((-974.491275), (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Directory directory0 = new Directory();
      Double double0 = new Double(0.0);
      directory0.setAverageRating(double0);
      Double double1 = directory0.getAverageRating();
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Directory directory0 = new Directory();
      Double double0 = new Double(1129.5395247397485);
      directory0.averageRating = double0;
      Double double1 = directory0.getAverageRating();
      assertEquals(1129.5395247397485, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Directory directory0 = new Directory();
      Double double0 = new Double(486.0);
      directory0.setAverageRating(double0);
      Double double1 = directory0.getAverageRating();
      assertEquals(486.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Directory directory0 = new Directory();
      List<Child> list0 = directory0.getChild();
      List<Child> list1 = directory0.getChild();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Directory directory0 = new Directory();
      String string0 = directory0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Directory directory0 = new Directory();
      XMLGregorianCalendar xMLGregorianCalendar0 = directory0.getStarred();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Directory directory0 = new Directory();
      String string0 = directory0.getParent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Directory directory0 = new Directory();
      Double double0 = directory0.getAverageRating();
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Directory directory0 = new Directory();
      Long long0 = directory0.getPlayCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Directory directory0 = new Directory();
      String string0 = directory0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Directory directory0 = new Directory();
      Integer integer0 = directory0.getUserRating();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Directory directory0 = new Directory();
      directory0.setStarred((XMLGregorianCalendar) null);
      assertNull(directory0.getId());
  }
}
