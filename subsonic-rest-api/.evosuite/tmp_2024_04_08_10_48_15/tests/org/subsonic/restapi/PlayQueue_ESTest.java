/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:44:25 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.PlayQueue;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayQueue_ESTest extends PlayQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.setUsername("\"+cCT{h5~");
      String string0 = playQueue0.getUsername();
      assertEquals("\"+cCT{h5~", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.setUsername("");
      String string0 = playQueue0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Long long0 = new Long(0L);
      playQueue0.position = long0;
      Long long1 = playQueue0.getPosition();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Long long0 = new Long((-724L));
      playQueue0.setPosition(long0);
      Long long1 = playQueue0.getPosition();
      assertEquals((-724L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Long long0 = new Long(1673L);
      playQueue0.setPosition(long0);
      Long long1 = playQueue0.getPosition();
      assertEquals(1673L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      playQueue0.entry = (List<Child>) linkedList0;
      Child child0 = new Child();
      linkedList0.add(child0);
      List<Child> list0 = playQueue0.getEntry();
      assertTrue(list0.contains(child0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Integer integer0 = new Integer(0);
      playQueue0.setCurrent(integer0);
      Integer integer1 = playQueue0.getCurrent();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Integer integer0 = new Integer((-2534));
      playQueue0.current = integer0;
      Integer integer1 = playQueue0.getCurrent();
      assertEquals((-2534), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Integer integer0 = new Integer(1524);
      playQueue0.current = integer0;
      Integer integer1 = playQueue0.getCurrent();
      assertEquals(1524, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.setChangedBy("Oh-]5q}>t");
      String string0 = playQueue0.getChangedBy();
      assertEquals("Oh-]5q}>t", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.setChangedBy("");
      String string0 = playQueue0.getChangedBy();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.getEntry();
      List<Child> list0 = playQueue0.getEntry();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      XMLGregorianCalendar xMLGregorianCalendar0 = playQueue0.getChanged();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Integer integer0 = playQueue0.getCurrent();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.setChanged((XMLGregorianCalendar) null);
      assertNull(playQueue0.getUsername());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      String string0 = playQueue0.getChangedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      String string0 = playQueue0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlayQueue playQueue0 = new PlayQueue();
      Long long0 = playQueue0.getPosition();
      assertNull(long0);
  }
}
