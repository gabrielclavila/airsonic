/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 11 00:02:36 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.JukeboxStatus;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JukeboxStatus_ESTest extends JukeboxStatus_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.setPlaying(true);
      boolean boolean0 = jukeboxStatus0.isPlaying();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      Integer integer0 = new Integer(24);
      jukeboxStatus0.position = integer0;
      Integer integer1 = jukeboxStatus0.getPosition();
      assertEquals(24, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      Integer integer0 = new Integer((-1));
      jukeboxStatus0.setPosition(integer0);
      Integer integer1 = jukeboxStatus0.getPosition();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.gain = (-1.0F);
      float float0 = jukeboxStatus0.getGain();
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.currentIndex = (-1);
      int int0 = jukeboxStatus0.getCurrentIndex();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      float float0 = jukeboxStatus0.getGain();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      int int0 = jukeboxStatus0.getCurrentIndex();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.setCurrentIndex(24);
      int int0 = jukeboxStatus0.getCurrentIndex();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      Integer integer0 = jukeboxStatus0.getPosition();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      boolean boolean0 = jukeboxStatus0.isPlaying();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      Integer integer0 = new Integer(0);
      jukeboxStatus0.setPosition(integer0);
      Integer integer1 = jukeboxStatus0.getPosition();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.setGain(24);
      float float0 = jukeboxStatus0.getGain();
      assertEquals(24.0F, float0, 0.01F);
  }
}
