/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:14:07 GMT 2024
 */

package org.airsonic.player.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Stack;
import java.util.Vector;
import org.airsonic.player.domain.MediaFile;
import org.airsonic.player.domain.MusicFolder;
import org.airsonic.player.domain.PlayQueue;
import org.airsonic.player.domain.Player;
import org.airsonic.player.domain.RandomSearchCriteria;
import org.airsonic.player.domain.TransferStatus;
import org.airsonic.player.domain.VideoTranscodingSettings;
import org.airsonic.player.io.PlayQueueInputStream;
import org.airsonic.player.service.AudioScrobblerService;
import org.airsonic.player.service.MediaFileService;
import org.airsonic.player.service.SearchService;
import org.airsonic.player.service.TranscodingService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayQueueInputStream_ESTest extends PlayQueueInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer((-5396));
      PlayQueue playQueue0 = new PlayQueue();
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      byte[] byteArray0 = new byte[3];
      playQueueInputStream0.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer(0);
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(2221, 0, 0, (-5060), true);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, "jU5", videoTranscodingSettings0, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        playQueueInputStream0.read(byteArray0, 5325, (-5060));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.PlayQueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      PlayQueue playQueue0 = new PlayQueue();
      MediaFile[] mediaFileArray0 = new MediaFile[2];
      playQueue0.addFiles(false, mediaFileArray0);
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((byte)78);
      MediaFileService mediaFileService0 = new MediaFileService();
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        playQueueInputStream0.read(byteArray0, (int) (byte)78, (int) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.domain.PlayQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer((-5376));
      PlayQueue playQueue0 = new PlayQueue();
      Vector<MusicFolder> vector0 = new Vector<MusicFolder>();
      MockDate mockDate0 = new MockDate(3331L);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-5376), "z#I!r*fO-2zP6", integer0, integer0, vector0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, false, false, "sonos");
      playQueue0.setRandomSearchCriteria(randomSearchCriteria0);
      playQueue0.next();
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      Stack<MediaFile> stack0 = new Stack<MediaFile>();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(searchService0).getRandomSongs(any(org.airsonic.player.domain.RandomSearchCriteria.class));
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, "sonos", (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      MediaFile mediaFile0 = new MediaFile();
      stack0.add(mediaFile0);
      // Undeclared exception!
      try { 
        playQueueInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer(176);
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(0, 5066, 0, 5066, true);
      TranscodingService transcodingService0 = new TranscodingService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, "sq", videoTranscodingSettings0, transcodingService0, (AudioScrobblerService) null, (MediaFileService) null, searchService0);
      // Undeclared exception!
      try { 
        playQueueInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.PlayQueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.setClientId("sonos");
      Integer integer0 = new Integer((-5396));
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      playQueueInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.setClientId("");
      Integer integer0 = new Integer((-5396));
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      playQueueInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer((-5396));
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        playQueueInputStream0.read(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.PlayQueueInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setClientId("sonos");
      Integer integer0 = new Integer((-5376));
      PlayQueue playQueue0 = new PlayQueue();
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, "sonos", (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      playQueueInputStream0.read();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      Integer integer0 = new Integer((-5383));
      PlayQueue playQueue0 = new PlayQueue();
      Vector<MusicFolder> vector0 = new Vector<MusicFolder>();
      MockDate mockDate0 = new MockDate((-5383));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-5383), "sZnos", integer0, integer0, vector0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, false, false, "sZnos");
      playQueue0.setRandomSearchCriteria(randomSearchCriteria0);
      playQueue0.next();
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      MediaFileService mediaFileService0 = new MediaFileService();
      Stack<MediaFile> stack0 = new Stack<MediaFile>();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(searchService0).getRandomSongs(any(org.airsonic.player.domain.RandomSearchCriteria.class));
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, "sZnos", (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      MediaFile.MediaType mediaFile_MediaType0 = MediaFile.MediaType.DIRECTORY;
      MediaFile mediaFile0 = new MediaFile((-5383), "", "", mediaFile_MediaType0, "raw", "sZnos", "sZnos", "sZnos", "sZnos", integer0, integer0, integer0, "sZnos", integer0, false, integer0, (Long) null, integer0, integer0, "sZnos", "sZnos", (-5383), mockDate0, "", mockDate0, mockDate0, mockDate0, mockDate0, false, (-5383), "sZnos", "");
      stack0.add(mediaFile0);
      // Undeclared exception!
      try { 
        playQueueInputStream0.read();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.service.MediaFileService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      PlayQueue playQueue0 = new PlayQueue();
      playQueue0.next();
      player0.setPlayQueue(playQueue0);
      TranscodingService transcodingService0 = new TranscodingService();
      AudioScrobblerService audioScrobblerService0 = new AudioScrobblerService();
      SearchService searchService0 = mock(SearchService.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((byte)84);
      MediaFileService mediaFileService0 = new MediaFileService();
      PlayQueueInputStream playQueueInputStream0 = new PlayQueueInputStream(player0, (TransferStatus) null, integer0, (String) null, (VideoTranscodingSettings) null, transcodingService0, audioScrobblerService0, mediaFileService0, searchService0);
      byte[] byteArray0 = new byte[10];
      playQueueInputStream0.read(byteArray0, (int) (byte)84, (int) (byte)84);
  }
}
