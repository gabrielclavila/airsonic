/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:18:55 GMT 2024
 */

package org.airsonic.player.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.command.EnumHolder;
import org.airsonic.player.command.UserSettingsCommand;
import org.airsonic.player.domain.MusicFolder;
import org.airsonic.player.domain.TranscodeScheme;
import org.airsonic.player.domain.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserSettingsCommand_ESTest extends UserSettingsCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setStreamRole(true);
      boolean boolean0 = userSettingsCommand0.isStreamRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("3@LFvrS", "3@LFvrS", "3@LFvrS", true, 18L, 18L, 18L);
      user0.setShareRole(true);
      userSettingsCommand0.setUser(user0);
      userSettingsCommand0.isShareRole();
      assertFalse(userSettingsCommand0.isCoverArtRole());
      assertFalse(userSettingsCommand0.isStreamRole());
      assertFalse(userSettingsCommand0.isAdminRole());
      assertFalse(userSettingsCommand0.isDownloadRole());
      assertFalse(userSettingsCommand0.isCommentRole());
      assertFalse(userSettingsCommand0.isPodcastRole());
      assertFalse(userSettingsCommand0.isUploadRole());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setSettingsRole(true);
      boolean boolean0 = userSettingsCommand0.isSettingsRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setPodcastRole(true);
      boolean boolean0 = userSettingsCommand0.isPodcastRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setPasswordChange(true);
      boolean boolean0 = userSettingsCommand0.isPasswordChange();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setNewUser(true);
      boolean boolean0 = userSettingsCommand0.isNewUser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setLdapEnabled(true);
      boolean boolean0 = userSettingsCommand0.isLdapEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setJukeboxRole(true);
      boolean boolean0 = userSettingsCommand0.isJukeboxRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setDownloadRole(true);
      boolean boolean0 = userSettingsCommand0.isDownloadRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setCurrentUser(true);
      boolean boolean0 = userSettingsCommand0.isCurrentUser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setCoverArtRole(true);
      boolean boolean0 = userSettingsCommand0.isCoverArtRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setCommentRole(true);
      boolean boolean0 = userSettingsCommand0.isCommentRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setAdminRole(true);
      boolean boolean0 = userSettingsCommand0.isAdminRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setAdmin(true);
      boolean boolean0 = userSettingsCommand0.isAdmin();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      linkedList0.add((User) null);
      userSettingsCommand0.setUsers(linkedList0);
      List<User> list0 = userSettingsCommand0.getUsers();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("", "", "v");
      userSettingsCommand0.setUser(user0);
      userSettingsCommand0.getUsername();
      assertFalse(userSettingsCommand0.isStreamRole());
      assertFalse(userSettingsCommand0.isCommentRole());
      assertFalse(userSettingsCommand0.isDownloadRole());
      assertFalse(userSettingsCommand0.isUploadRole());
      assertFalse(userSettingsCommand0.isCoverArtRole());
      assertFalse(userSettingsCommand0.isAdminRole());
      assertFalse(userSettingsCommand0.isPodcastRole());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setTranscodeSchemeName("uKb1");
      String string0 = userSettingsCommand0.getTranscodeSchemeName();
      assertEquals("uKb1", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setTranscodeSchemeName("");
      String string0 = userSettingsCommand0.getTranscodeSchemeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      TranscodeScheme[] transcodeSchemeArray0 = new TranscodeScheme[4];
      TranscodeScheme transcodeScheme0 = TranscodeScheme.MAX_128;
      transcodeSchemeArray0[0] = transcodeScheme0;
      transcodeSchemeArray0[1] = transcodeSchemeArray0[0];
      transcodeSchemeArray0[2] = transcodeSchemeArray0[0];
      transcodeSchemeArray0[3] = transcodeScheme0;
      userSettingsCommand0.setTranscodeSchemes(transcodeSchemeArray0);
      EnumHolder[] enumHolderArray0 = userSettingsCommand0.getTranscodeSchemeHolders();
      assertEquals(4, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      TranscodeScheme[] transcodeSchemeArray0 = new TranscodeScheme[0];
      userSettingsCommand0.setTranscodeSchemes(transcodeSchemeArray0);
      EnumHolder[] enumHolderArray0 = userSettingsCommand0.getTranscodeSchemeHolders();
      assertEquals(0, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setTranscodeDirectory("LGm|;b");
      String string0 = userSettingsCommand0.getTranscodeDirectory();
      assertEquals("LGm|;b", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setTranscodeDirectory("");
      String string0 = userSettingsCommand0.getTranscodeDirectory();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setPassword("[");
      String string0 = userSettingsCommand0.getPassword();
      assertEquals("[", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setPassword("");
      String string0 = userSettingsCommand0.getPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setEmail("0gTMq)wM:k&sGW");
      String string0 = userSettingsCommand0.getEmail();
      assertEquals("0gTMq)wM:k&sGW", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setConfirmPassword("6#u&AV^G:E<'%wy!k");
      String string0 = userSettingsCommand0.getConfirmPassword();
      assertEquals("6#u&AV^G:E<'%wy!k", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      int[] intArray0 = new int[0];
      userSettingsCommand0.setAllowedMusicFolderIds(intArray0);
      int[] intArray1 = userSettingsCommand0.getAllowedMusicFolderIds();
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      userSettingsCommand0.setAllMusicFolders(linkedList0);
      List<MusicFolder> list0 = userSettingsCommand0.getAllMusicFolders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      linkedList0.add((MusicFolder) null);
      userSettingsCommand0.setAllMusicFolders(linkedList0);
      List<MusicFolder> list0 = userSettingsCommand0.getAllMusicFolders();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      // Undeclared exception!
      try { 
        userSettingsCommand0.setTranscodeSchemes((TranscodeScheme[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.command.UserSettingsCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("guest", "guest", "guest");
      user0.setJukeboxRole(true);
      userSettingsCommand0.setUser(user0);
      assertFalse(userSettingsCommand0.isStreamRole());
      assertFalse(userSettingsCommand0.isDownloadRole());
      assertFalse(userSettingsCommand0.isAdminRole());
      assertFalse(userSettingsCommand0.isUploadRole());
      assertFalse(userSettingsCommand0.isCommentRole());
      assertFalse(userSettingsCommand0.isCoverArtRole());
      assertFalse(userSettingsCommand0.isPodcastRole());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("MAX_224", "MAX_224", "MAX_224");
      user0.setStreamRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isStreamRole());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("3@LFvrS", "3@LFvrS", "3@LFvrS", true, 18L, 18L, 18L);
      user0.setPodcastRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isPodcastRole());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User(" [downlofad]", " [downlofad]", " [downlofad]");
      user0.setCommentRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isCommentRole());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("MAX_224", "MAX_224", "MAX_224");
      user0.setCoverArtRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isCoverArtRole());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("guest", "guest", "guest");
      user0.setUploadRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isUploadRole());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("3@LFvrS", "3@LFvrS", "3@LFvrS", true, 18L, 18L, 18L);
      user0.setDownloadRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isDownloadRole());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("MAX_224", "MAX_224", "MAX_224");
      user0.setAdminRole(true);
      userSettingsCommand0.setUser(user0);
      assertTrue(userSettingsCommand0.isAdminRole());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setUser((User) null);
      assertFalse(userSettingsCommand0.isDownloadRole());
      assertFalse(userSettingsCommand0.isAdminRole());
      assertFalse(userSettingsCommand0.isStreamRole());
      assertFalse(userSettingsCommand0.isPodcastRole());
      assertFalse(userSettingsCommand0.isUploadRole());
      assertFalse(userSettingsCommand0.isCommentRole());
      assertFalse(userSettingsCommand0.isCoverArtRole());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      User user0 = new User("MAX_224", "MAX_224", "MAX_224");
      userSettingsCommand0.setUser(user0);
      String string0 = userSettingsCommand0.getUsername();
      assertFalse(userSettingsCommand0.isCoverArtRole());
      assertFalse(userSettingsCommand0.isStreamRole());
      assertFalse(userSettingsCommand0.isAdminRole());
      assertFalse(userSettingsCommand0.isDownloadRole());
      assertFalse(userSettingsCommand0.isUploadRole());
      assertNotNull(string0);
      assertFalse(userSettingsCommand0.isPodcastRole());
      assertFalse(userSettingsCommand0.isCommentRole());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isAdminRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setShareRole(true);
      assertTrue(userSettingsCommand0.isShareRole());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isLdapAuthenticated();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getTranscodeDirectory();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isCommentRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isStreamRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setUploadRole(true);
      boolean boolean0 = userSettingsCommand0.isUploadRole();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isPasswordChange();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isPodcastRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setUsername("org.airsonic.player.command.UserSettingsCommand");
      assertNull(userSettingsCommand0.getPassword());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setEmail("");
      String string0 = userSettingsCommand0.getEmail();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getEmail();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isDownloadRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      EnumHolder[] enumHolderArray0 = userSettingsCommand0.getTranscodeSchemeHolders();
      assertNull(enumHolderArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isAdmin();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      LinkedList<User> linkedList0 = new LinkedList<User>();
      userSettingsCommand0.setUsers(linkedList0);
      List<User> list0 = userSettingsCommand0.getUsers();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isShareRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setTranscodingSupported(true);
      boolean boolean0 = userSettingsCommand0.isTranscodingSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isTranscodingSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      List<MusicFolder> list0 = userSettingsCommand0.getAllMusicFolders();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isSettingsRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isUploadRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isCurrentUser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isDeleteUser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isLdapEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      int[] intArray0 = new int[2];
      userSettingsCommand0.setAllowedMusicFolderIds(intArray0);
      int[] intArray1 = userSettingsCommand0.getAllowedMusicFolderIds();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isJukeboxRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isNewUser();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getConfirmPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      boolean boolean0 = userSettingsCommand0.isCoverArtRole();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      List<User> list0 = userSettingsCommand0.getUsers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setConfirmPassword("");
      String string0 = userSettingsCommand0.getConfirmPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setLdapAuthenticated(true);
      boolean boolean0 = userSettingsCommand0.isLdapAuthenticated();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      userSettingsCommand0.setDeleteUser(true);
      boolean boolean0 = userSettingsCommand0.isDeleteUser();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      String string0 = userSettingsCommand0.getTranscodeSchemeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UserSettingsCommand userSettingsCommand0 = new UserSettingsCommand();
      int[] intArray0 = userSettingsCommand0.getAllowedMusicFolderIds();
      assertNull(intArray0);
  }
}
