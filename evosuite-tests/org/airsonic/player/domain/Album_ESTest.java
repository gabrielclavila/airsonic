/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:00:58 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import org.airsonic.player.domain.Album;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Album_ESTest extends Album_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Album album0 = new Album(0, "org.airsonic.player.domain.Album", "org.airsonic.player.domain.Album", "org.airsonic.player.domain.Album", 0, 0, "org.airsonic.player.domain.Album", integer0, "~C~mLExDj,dXqx+B' b", (-1), (Date) null, "org.airsonic.player.domain.Album", (Date) null, (Date) null, true, integer0, "");
      boolean boolean0 = album0.isPresent();
      assertEquals(0, album0.getSongCount());
      assertEquals("org.airsonic.player.domain.Album", album0.getName());
      assertEquals((-1), album0.getPlayCount());
      assertTrue(boolean0);
      assertEquals("org.airsonic.player.domain.Album", album0.getCoverArtPath());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals(0, album0.getId());
      assertEquals("~C~mLExDj,dXqx+B' b", album0.getGenre());
      assertEquals("org.airsonic.player.domain.Album", album0.getPath());
      assertEquals("org.airsonic.player.domain.Album", album0.getComment());
      assertEquals("org.airsonic.player.domain.Album", album0.getArtist());
      assertEquals(0, album0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Album album0 = new Album(0, (String) null, (String) null, "", (-1), (-1), "", integer0, "", 0, (Date) null, "GbXTj(%BrXpf`m.<", (Date) null, (Date) null, false, integer0, (String) null);
      album0.getYear();
      assertEquals((-1), album0.getDurationSeconds());
      assertEquals(0, album0.getId());
      assertEquals("", album0.getGenre());
      assertEquals((-1), album0.getSongCount());
      assertEquals("", album0.getArtist());
      assertEquals("GbXTj(%BrXpf`m.<", album0.getComment());
      assertEquals(0, album0.getPlayCount());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getCoverArtPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Album album0 = new Album();
      Integer integer0 = new Integer(2099);
      album0.setYear(integer0);
      Integer integer1 = album0.getYear();
      assertEquals(2099, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      MockDate mockDate0 = new MockDate((-1), 763, 945);
      Album album0 = new Album((-1434), "", "", (String) null, 0, (-1434), "/|]", integer0, (String) null, (-1), mockDate0, "", mockDate0, mockDate0, false, integer0, "");
      album0.getYear();
      assertEquals(0, album0.getSongCount());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals("/|]", album0.getCoverArtPath());
      assertEquals("", album0.getName());
      assertEquals((-1434), album0.getId());
      assertEquals("", album0.getComment());
      assertEquals("", album0.getPath());
      assertEquals((-1), album0.getPlayCount());
      assertEquals((-1434), album0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Album album0 = new Album();
      album0.setSongCount(1105);
      int int0 = album0.getSongCount();
      assertEquals(1105, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = Integer.getInteger("");
      MockDate mockDate0 = new MockDate();
      Album album0 = new Album((-1978), "", "", "", (-1978), (-1), "", (Integer) null, "", (-658), mockDate0, "", mockDate0, mockDate0, false, integer0, "");
      int int0 = album0.getSongCount();
      assertEquals((-1), album0.getDurationSeconds());
      assertFalse(album0.isPresent());
      assertEquals((-1978), int0);
      assertEquals((-658), album0.getPlayCount());
      assertEquals((-1978), album0.getId());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Album album0 = new Album();
      album0.setPlayCount(3662);
      int int0 = album0.getPlayCount();
      assertEquals(3662, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Album album0 = new Album();
      album0.setPath("b_");
      String string0 = album0.getPath();
      assertEquals("b_", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Album album0 = new Album();
      album0.setPath("");
      String string0 = album0.getPath();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Album album0 = new Album();
      album0.setName("");
      String string0 = album0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(537);
      MockDate mockDate0 = new MockDate();
      Album album0 = new Album(537, "", "org.airsonic.player.domain.Album", "", 537, 537, "org.airsonic.player.domain.Album", integer0, "", (-51), mockDate0, "org.airsonic.player.domain.Album", mockDate0, (Date) null, true, integer0, "org.airsonic.player.domain.Album");
      String string0 = album0.getMusicBrainzReleaseId();
      assertTrue(album0.isPresent());
      assertEquals("org.airsonic.player.domain.Album", string0);
      assertEquals("org.airsonic.player.domain.Album", album0.getComment());
      assertEquals("", album0.getGenre());
      assertEquals(537, album0.getId());
      assertEquals("", album0.getArtist());
      assertEquals("org.airsonic.player.domain.Album", album0.getName());
      assertEquals((-51), album0.getPlayCount());
      assertEquals("org.airsonic.player.domain.Album", album0.getCoverArtPath());
      assertEquals(537, album0.getSongCount());
      assertEquals("", album0.getPath());
      assertEquals(537, album0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Album album0 = new Album();
      album0.setMusicBrainzReleaseId("");
      String string0 = album0.getMusicBrainzReleaseId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Album album0 = new Album();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      album0.setLastScanned(mockDate0);
      Date date0 = album0.getLastScanned();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1289);
      MockDate mockDate0 = new MockDate(2138, 0, 1987);
      Album album0 = new Album((-662), "org.airsonic.player.domain.Album", "org.airsonic.player.domain.Album", "org.airsonic.player.domain.Album", 1289, 2138, "org.airsonic.player.domain.Album", integer0, "org.airsonic.player.domain.Album", 0, mockDate0, "org.airsonic.player.domain.Album", mockDate0, mockDate0, true, integer0, "org.airsonic.player.domain.Album");
      album0.getLastPlayed();
      assertEquals((-662), album0.getId());
      assertEquals(0, album0.getPlayCount());
      assertEquals(1289, album0.getSongCount());
      assertEquals(2138, album0.getDurationSeconds());
      assertTrue(album0.isPresent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2718);
      MockDate mockDate0 = new MockDate();
      Album album0 = new Album(433, "", "", "", 433, 433, "tkwiuFF&+KYY{$fnd", integer0, "", (-1), mockDate0, "tkwiuFF&+KYY{$fnd", mockDate0, mockDate0, false, (Integer) null, (String) null);
      int int0 = album0.getId();
      assertEquals(433, album0.getSongCount());
      assertEquals("", album0.getName());
      assertEquals(433, album0.getDurationSeconds());
      assertEquals("tkwiuFF&+KYY{$fnd", album0.getCoverArtPath());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getGenre());
      assertEquals("", album0.getArtist());
      assertEquals("", album0.getPath());
      assertEquals(433, int0);
      assertEquals("tkwiuFF&+KYY{$fnd", album0.getComment());
      assertEquals((-1), album0.getPlayCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Album album0 = new Album();
      album0.setId((-1));
      int int0 = album0.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Album album0 = new Album(1, "", "", "a'X$$FWptQ", 1, 1, "a'X$$FWptQ", integer0, "a'X$$FWptQ", 1, (Date) null, "org.airsonic.player.domain.Album", (Date) null, (Date) null, true, integer0, "sDDSt%2Y32qd5Ni2d2^");
      String string0 = album0.getGenre();
      assertEquals(1, album0.getDurationSeconds());
      assertEquals("", album0.getName());
      assertEquals("a'X$$FWptQ", string0);
      assertEquals(1, album0.getSongCount());
      assertEquals("sDDSt%2Y32qd5Ni2d2^", album0.getMusicBrainzReleaseId());
      assertEquals("a'X$$FWptQ", album0.getCoverArtPath());
      assertEquals(1, album0.getPlayCount());
      assertEquals("org.airsonic.player.domain.Album", album0.getComment());
      assertEquals("a'X$$FWptQ", album0.getArtist());
      assertEquals("", album0.getPath());
      assertTrue(album0.isPresent());
      assertEquals(1, album0.getId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Album album0 = new Album();
      album0.setGenre("");
      String string0 = album0.getGenre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Album album0 = new Album();
      Integer integer0 = new Integer(0);
      album0.setFolderId(integer0);
      Integer integer1 = album0.getFolderId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1253));
      MockDate mockDate0 = new MockDate(1);
      Album album0 = new Album(1, "", "", "", 1, 1, "EalzUf*q", integer0, "EalzUf*q", (-1253), mockDate0, "", mockDate0, mockDate0, false, integer0, "ASLeCL");
      album0.getFolderId();
      assertEquals("ASLeCL", album0.getMusicBrainzReleaseId());
      assertEquals("", album0.getPath());
      assertEquals("", album0.getArtist());
      assertEquals((-1253), album0.getPlayCount());
      assertEquals(1, album0.getId());
      assertEquals("EalzUf*q", album0.getGenre());
      assertEquals(1, album0.getSongCount());
      assertEquals(1, album0.getDurationSeconds());
      assertEquals("", album0.getComment());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getName());
      assertEquals("EalzUf*q", album0.getCoverArtPath());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1157), (-1), 3186);
      Album album0 = new Album(1, "", "lB5Y4qvIp#", "|", 1, 1, "", integer0, "lB5Y4qvIp#", 1, mockDate0, (String) null, mockDate0, mockDate0, true, integer0, "");
      int int0 = album0.getDurationSeconds();
      assertEquals("", album0.getCoverArtPath());
      assertEquals("lB5Y4qvIp#", album0.getName());
      assertEquals(1, album0.getSongCount());
      assertEquals("|", album0.getArtist());
      assertEquals(1, album0.getId());
      assertEquals(1, int0);
      assertEquals("lB5Y4qvIp#", album0.getGenre());
      assertTrue(album0.isPresent());
      assertEquals(1, album0.getPlayCount());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals("", album0.getPath());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Album album0 = new Album();
      MockDate mockDate0 = new MockDate(0, 0, 0);
      album0.setCreated(mockDate0);
      Date date0 = album0.getCreated();
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", date0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(1);
      MockDate mockDate0 = new MockDate(1, 1847, 1);
      Album album0 = new Album(1, "(_'mIT*G_h", "", "(_'mIT*G_h", 1, 1, "org.airsonic.player.domain.Album", integer0, "(_'mIT*G_h", 1, mockDate0, "org.airsonic.player.domain.Album", mockDate0, mockDate0, false, (Integer) null, "");
      String string0 = album0.getCoverArtPath();
      assertEquals("org.airsonic.player.domain.Album", album0.getComment());
      assertEquals("org.airsonic.player.domain.Album", string0);
      assertEquals(1, album0.getId());
      assertEquals(1, album0.getPlayCount());
      assertEquals("(_'mIT*G_h", album0.getPath());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals(1, album0.getSongCount());
      assertEquals("(_'mIT*G_h", album0.getGenre());
      assertEquals(1, album0.getDurationSeconds());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getName());
      assertEquals("(_'mIT*G_h", album0.getArtist());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1546));
      MockDate mockDate0 = new MockDate((-1546), 0, (-61), (-1104), (-1546), (-61));
      Album album0 = new Album(0, "", "", "mC'&|5qdWd$j5vw", (-1546), 0, "", integer0, "", 0, mockDate0, (String) null, mockDate0, mockDate0, false, integer0, "");
      String string0 = album0.getCoverArtPath();
      assertEquals("", string0);
      assertEquals("mC'&|5qdWd$j5vw", album0.getArtist());
      assertEquals("", album0.getName());
      assertNotNull(string0);
      assertFalse(album0.isPresent());
      assertEquals(0, album0.getDurationSeconds());
      assertEquals("", album0.getGenre());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals(0, album0.getId());
      assertEquals((-1546), album0.getSongCount());
      assertEquals("", album0.getPath());
      assertEquals(0, album0.getPlayCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Album album0 = new Album();
      album0.setComment("p%FWMnl;;}3[-\"9LOF");
      String string0 = album0.getComment();
      assertEquals("p%FWMnl;;}3[-\"9LOF", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Album album0 = new Album();
      album0.setComment("");
      String string0 = album0.getComment();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1604L);
      Album album0 = new Album(0, "", "", "dq$MBb[!gXw <7N5D5", 0, 0, "", (Integer) null, "", 0, mockDate0, "U`WPQ", mockDate0, mockDate0, true, (Integer) null, "U`WPQ");
      String string0 = album0.getArtist();
      assertEquals("U`WPQ", album0.getComment());
      assertEquals("", album0.getCoverArtPath());
      assertTrue(album0.isPresent());
      assertEquals("dq$MBb[!gXw <7N5D5", string0);
      assertEquals("", album0.getName());
      assertEquals("", album0.getGenre());
      assertEquals(0, album0.getDurationSeconds());
      assertEquals(0, album0.getSongCount());
      assertEquals("", album0.getPath());
      assertEquals(0, album0.getPlayCount());
      assertEquals("U`WPQ", album0.getMusicBrainzReleaseId());
      assertEquals(0, album0.getId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = new Integer((-1253));
      MockDate mockDate0 = new MockDate(1);
      Album album0 = new Album(1, "", "", "", 1, 1, "EalzUf*q", integer0, "EalzUf*q", (-1253), mockDate0, "", mockDate0, mockDate0, false, integer0, "ASLeCL");
      String string0 = album0.getArtist();
      assertEquals("", album0.getComment());
      assertEquals("EalzUf*q", album0.getGenre());
      assertEquals(1, album0.getId());
      assertEquals(1, album0.getDurationSeconds());
      assertFalse(album0.isPresent());
      assertEquals("ASLeCL", album0.getMusicBrainzReleaseId());
      assertEquals((-1253), album0.getPlayCount());
      assertEquals("EalzUf*q", album0.getCoverArtPath());
      assertEquals("", string0);
      assertEquals("", album0.getPath());
      assertEquals("", album0.getName());
      assertEquals(1, album0.getSongCount());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Album album0 = new Album();
      album0.setPlayCount((-1274));
      int int0 = album0.getPlayCount();
      assertEquals((-1274), int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getGenre();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Album album0 = new Album();
      album0.setArtist("");
      assertNull(album0.getFolderId());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Album album0 = new Album();
      Integer integer0 = album0.getYear();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Album album0 = new Album();
      boolean boolean0 = album0.isPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Album album0 = new Album();
      int int0 = album0.getSongCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getCoverArtPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Album album0 = new Album();
      Date date0 = album0.getLastPlayed();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Album album0 = new Album();
      int int0 = album0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Album album0 = new Album();
      album0.setPresent(false);
      assertFalse(album0.isPresent());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Album album0 = new Album();
      album0.setDurationSeconds((-1274));
      int int0 = album0.getDurationSeconds();
      assertEquals((-1274), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Album album0 = new Album();
      int int0 = album0.getPlayCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Album album0 = new Album((-46), "", "p~#DT\"%le*)'+y", "", 0, 1612, "", integer0, "", 1612, (Date) null, "", (Date) null, (Date) null, false, integer0, "");
      String string0 = album0.getName();
      assertEquals("p~#DT\"%le*)'+y", string0);
      assertEquals("", album0.getCoverArtPath());
      assertEquals("", album0.getPath());
      assertEquals(1612, album0.getPlayCount());
      assertEquals((-46), album0.getId());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getArtist());
      assertEquals("", album0.getComment());
      assertEquals("", album0.getMusicBrainzReleaseId());
      assertEquals(0, album0.getSongCount());
      assertEquals("", album0.getGenre());
      assertEquals(1612, album0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Album album0 = new Album();
      Date date0 = album0.getCreated();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getMusicBrainzReleaseId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Album album0 = new Album();
      int int0 = album0.getDurationSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Album album0 = new Album(0, (String) null, (String) null, "", (-1), (-1), "", integer0, "", 0, (Date) null, "GbXTj(%BrXpf`m.<", (Date) null, (Date) null, false, integer0, (String) null);
      Integer integer1 = new Integer(1510);
      album0.setFolderId(integer1);
      album0.getFolderId();
      assertEquals((-1), album0.getDurationSeconds());
      assertFalse(album0.isPresent());
      assertEquals("", album0.getGenre());
      assertEquals("", album0.getCoverArtPath());
      assertEquals("GbXTj(%BrXpf`m.<", album0.getComment());
      assertEquals("", album0.getArtist());
      assertEquals((-1), album0.getSongCount());
      assertEquals(0, album0.getPlayCount());
      assertEquals(0, album0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Album album0 = new Album();
      album0.setCoverArtPath((String) null);
      assertNull(album0.getArtist());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Album album0 = new Album();
      Date date0 = album0.getLastScanned();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Album album0 = new Album();
      Integer integer0 = album0.getFolderId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Album album0 = new Album();
      MockDate mockDate0 = new MockDate(0, 1, 0, (-1169), 0);
      album0.setLastPlayed(mockDate0);
      assertNull(album0.getYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Album album0 = new Album();
      String string0 = album0.getArtist();
      assertNull(string0);
  }
}
