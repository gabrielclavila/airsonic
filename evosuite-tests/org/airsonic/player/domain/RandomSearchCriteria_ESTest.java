/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:11:25 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.io.File;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.domain.MusicFolder;
import org.airsonic.player.domain.RandomSearchCriteria;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomSearchCriteria_ESTest extends RandomSearchCriteria_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      boolean boolean0 = randomSearchCriteria0.isShowUnstarredSongs();
      assertFalse(boolean0);
      assertEquals(1, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "q`.W+3\\uPJbbu";
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      Instant instant0 = MockInstant.ofEpochMilli(0);
      Date date0 = Date.from(instant0);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1940, string0, integer0, integer0, linkedList0, date0, date0, integer0, integer0, integer0, integer0, false, false, string0);
      boolean boolean0 = randomSearchCriteria0.isShowStarredSongs();
      assertFalse(boolean0);
      assertEquals(1940, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-1119), "`C;}!9gQm:9NJg!i", integer0, integer0, linkedList0);
      Integer integer1 = randomSearchCriteria0.getToYear();
      assertEquals((-1119), randomSearchCriteria0.getCount());
      assertNotNull(integer1);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      randomSearchCriteria0.getToYear();
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(1, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate((-321), (-3283), (-321));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-321), "", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, true, true, "5<\"'");
      randomSearchCriteria0.getToYear();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals("", randomSearchCriteria0.getGenre());
      assertEquals("5<\"'", randomSearchCriteria0.getFormat());
      assertEquals((-321), randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "7L{09eR@SNy-C?", integer0, integer0, (List<MusicFolder>) null);
      randomSearchCriteria0.getMusicFolders();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-828), "org.airsonic.player.domain.MusicFolder", integer0, integer0, linkedList0);
      File file0 = MockFile.createTempFile("org.airsonic.player.domain.MusicFolder", "");
      MockDate mockDate0 = new MockDate(1060, 1060, 0, (-1557), 0, 0);
      MusicFolder musicFolder0 = new MusicFolder(file0, (String) null, true, mockDate0);
      linkedList0.add(musicFolder0);
      randomSearchCriteria0.getMusicFolders();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-608));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, (-608), 812, (-1), 0, (-1));
      Integer integer1 = new Integer(812);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, "org.airsonic.player.domain.MusicFolder", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer1, integer0, true, true, "[<F{q");
      Integer integer2 = randomSearchCriteria0.getMinPlayCount();
      assertEquals(812, (int)integer2);
      assertEquals((-608), (int)randomSearchCriteria0.getMinAlbumRating());
      assertEquals(1, randomSearchCriteria0.getCount());
      assertEquals((-608), (int)randomSearchCriteria0.getToYear());
      assertEquals((-608), (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals((-608), (int)randomSearchCriteria0.getFromYear());
      assertEquals("org.airsonic.player.domain.MusicFolder", randomSearchCriteria0.getGenre());
      assertEquals((-608), (int)randomSearchCriteria0.getMaxPlayCount());
      assertEquals("[<F{q", randomSearchCriteria0.getFormat());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      Integer integer1 = new Integer(0);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer1, integer1, integer1, integer1, false, false, "");
      Integer integer2 = randomSearchCriteria0.getMinPlayCount();
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(0, (int)integer2);
      assertEquals(0, (int)randomSearchCriteria0.getMinAlbumRating());
      assertEquals(1, (int)randomSearchCriteria0.getFromYear());
      assertEquals(1, randomSearchCriteria0.getCount());
      assertEquals(0, (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals(1, (int)randomSearchCriteria0.getToYear());
      assertEquals(0, (int)randomSearchCriteria0.getMaxPlayCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-608));
      Integer integer1 = new Integer((-3462));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, (-608), 812, (-1), 0, (-1));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, "org.airsonic.player.domain.MusicFolder", integer0, integer1, linkedList0, mockDate0, mockDate0, integer1, integer1, integer1, integer1, true, true, "[<F{q");
      Integer integer2 = randomSearchCriteria0.getMinPlayCount();
      assertEquals((-3462), (int)randomSearchCriteria0.getMaxPlayCount());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals((-3462), (int)randomSearchCriteria0.getToYear());
      assertEquals((-3462), (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals("[<F{q", randomSearchCriteria0.getFormat());
      assertEquals((-3462), (int)randomSearchCriteria0.getMinAlbumRating());
      assertEquals(1, randomSearchCriteria0.getCount());
      assertEquals((-3462), (int)integer2);
      assertEquals("org.airsonic.player.domain.MusicFolder", randomSearchCriteria0.getGenre());
      assertEquals((-608), (int)randomSearchCriteria0.getFromYear());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-527));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, 1248, 0, 0, 2191, (-1));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, false, false, "");
      randomSearchCriteria0.getMinPlayCount();
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(0, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2311);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "org.airsonic.player.domain.RandomSearchCriteria", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, false, false, "NYM04Y{");
      randomSearchCriteria0.getMinLastPlayedDate();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals("org.airsonic.player.domain.RandomSearchCriteria", randomSearchCriteria0.getGenre());
      assertEquals("NYM04Y{", randomSearchCriteria0.getFormat());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1314));
      Integer integer1 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(3852, (-2806), 1, 0, (-1080));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-1314), "^RL~p}^D6)yFp`W", integer0, integer1, linkedList0, mockDate0, mockDate0, integer1, integer0, integer1, integer1, false, false, "Q*Z}haWC");
      Integer integer2 = randomSearchCriteria0.getMinAlbumRating();
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals("Q*Z}haWC", randomSearchCriteria0.getFormat());
      assertEquals(0, (int)randomSearchCriteria0.getMaxPlayCount());
      assertEquals((-1314), randomSearchCriteria0.getCount());
      assertEquals(0, (int)integer2);
      assertEquals(0, (int)randomSearchCriteria0.getMinPlayCount());
      assertEquals("^RL~p}^D6)yFp`W", randomSearchCriteria0.getGenre());
      assertEquals((-1314), (int)randomSearchCriteria0.getFromYear());
      assertEquals((-1314), (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals(0, (int)randomSearchCriteria0.getToYear());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1839);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "BZSa&X{]", integer0, (Integer) null, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, true, true, "BZSa&X{]");
      Integer integer1 = randomSearchCriteria0.getMinAlbumRating();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertNotNull(integer1);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2833);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate((-1), (-1), (-1090), (-1), 1774, (-1));
      Integer integer1 = new Integer((-3908));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(2833, "", (Integer) null, integer0, linkedList0, mockDate0, mockDate0, integer1, integer1, integer0, integer1, false, false, (String) null);
      Integer integer2 = randomSearchCriteria0.getMinAlbumRating();
      assertEquals(2833, (int)randomSearchCriteria0.getToYear());
      assertEquals((-3908), (int)integer2);
      assertEquals(2833, (int)randomSearchCriteria0.getMinPlayCount());
      assertEquals(2833, randomSearchCriteria0.getCount());
      assertEquals((-3908), (int)randomSearchCriteria0.getMaxPlayCount());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertNotNull(integer2);
      assertEquals((-3908), (int)randomSearchCriteria0.getMaxAlbumRating());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      MockDate mockDate0 = new MockDate(4949, 0, 501, 4949, 4949);
      Integer integer1 = new Integer(0);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(3163, "wzo?Sz", integer0, integer0, linkedList0, date0, mockDate0, (Integer) null, integer0, integer0, integer1, false, false, "wzo?Sz");
      Integer integer2 = randomSearchCriteria0.getMaxPlayCount();
      assertEquals(1, (int)randomSearchCriteria0.getFromYear());
      assertEquals(1, (int)randomSearchCriteria0.getMinPlayCount());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(1, (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals(1, (int)randomSearchCriteria0.getToYear());
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertEquals(3163, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      randomSearchCriteria0.getMaxPlayCount();
      assertEquals(1, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1839);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate();
      Integer integer1 = new Integer((-1));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "BZSa&X{]", integer0, (Integer) null, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer1, true, true, "BZSa&X{]");
      Integer integer2 = randomSearchCriteria0.getMaxPlayCount();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertEquals((-1), (int)integer2);
      assertEquals(1839, (int)randomSearchCriteria0.getMinPlayCount());
      assertEquals(1839, (int)randomSearchCriteria0.getMaxAlbumRating());
      assertEquals(1839, (int)randomSearchCriteria0.getFromYear());
      assertEquals(1839, (int)randomSearchCriteria0.getMinAlbumRating());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertNotNull(integer2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer((-608));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, (-608), 812, (-1), 0, (-1));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, "org.airsonic.player.domain.MusicFolder", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, true, true, "[<F{q");
      randomSearchCriteria0.getMaxLastPlayedDate();
      assertEquals("org.airsonic.player.domain.MusicFolder", randomSearchCriteria0.getGenre());
      assertEquals(1, randomSearchCriteria0.getCount());
      assertEquals("[<F{q", randomSearchCriteria0.getFormat());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "8", integer0, integer0, linkedList0, (Date) null, mockDate0, integer0, integer0, integer0, integer0, false, false, "org.airsonic.player.domain.MusicFolder");
      randomSearchCriteria0.getMaxAlbumRating();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals("8", randomSearchCriteria0.getGenre());
      assertEquals("org.airsonic.player.domain.MusicFolder", randomSearchCriteria0.getFormat());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, 0, 0, 2151, 0);
      Integer integer1 = new Integer((-1167));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer1, integer1, integer1, true, true, "");
      Integer integer2 = randomSearchCriteria0.getMaxAlbumRating();
      assertEquals((-1167), (int)integer2);
      assertEquals((-1167), (int)randomSearchCriteria0.getMaxPlayCount());
      assertEquals((-1167), (int)randomSearchCriteria0.getMinPlayCount());
      assertEquals(0, randomSearchCriteria0.getCount());
      assertEquals(0, (int)randomSearchCriteria0.getToYear());
      assertEquals(0, (int)randomSearchCriteria0.getMinAlbumRating());
      assertEquals(0, (int)randomSearchCriteria0.getFromYear());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1696);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, ">+=^vCnqqpC\u0002y>[j.", integer1, integer1, linkedList0, (Date) null, (Date) null, integer1, integer1, integer1, integer0, false, false, ">+=^vCnqqpC\u0002y>[j.");
      Integer integer2 = randomSearchCriteria0.getMaxAlbumRating();
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(1696, (int)randomSearchCriteria0.getMinAlbumRating());
      assertEquals(0, (int)randomSearchCriteria0.getMaxPlayCount());
      assertEquals(1696, (int)randomSearchCriteria0.getMinPlayCount());
      assertEquals(1696, (int)integer2);
      assertEquals(1696, (int)randomSearchCriteria0.getToYear());
      assertEquals(0, randomSearchCriteria0.getCount());
      assertEquals(1696, (int)randomSearchCriteria0.getFromYear());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      String string0 = randomSearchCriteria0.getGenre();
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertNull(string0);
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(1, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      MockDate mockDate0 = new MockDate(0, 0, (-1179), 0, 1, (-1179));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "", integer0, integer0, (List<MusicFolder>) null, mockDate0, mockDate0, integer0, integer0, integer0, integer0, true, false, "");
      randomSearchCriteria0.getGenre();
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(0, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "", integer0, integer0, linkedList0);
      Integer integer1 = randomSearchCriteria0.getFromYear();
      assertEquals(0, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertNotNull(integer1);
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      randomSearchCriteria0.getFromYear();
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(1, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-608));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0, (-608), 812, (-1), 0, (-1));
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, "org.airsonic.player.domain.MusicFolder", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, true, true, "[<F{q");
      randomSearchCriteria0.getFromYear();
      assertEquals("[<F{q", randomSearchCriteria0.getFormat());
      assertEquals(1, randomSearchCriteria0.getCount());
      assertEquals("org.airsonic.player.domain.MusicFolder", randomSearchCriteria0.getGenre());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      MockDate mockDate0 = new MockDate(0L);
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-1), "", integer0, integer0, linkedList0, mockDate0, mockDate0, integer0, integer0, integer0, integer0, false, false, "LE+sb.");
      String string0 = randomSearchCriteria0.getFormat();
      assertEquals("", randomSearchCriteria0.getGenre());
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertEquals("LE+sb.", string0);
      assertEquals((-1), randomSearchCriteria0.getCount());
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(0, "", integer0, integer0, linkedList0);
      int int0 = randomSearchCriteria0.getCount();
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(0, int0);
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-740), "wzo?Sz", (Integer) null, integer0, linkedList0);
      int int0 = randomSearchCriteria0.getCount();
      assertEquals((-740), int0);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1, (String) null, integer0, integer0, linkedList0, (Date) null, (Date) null, integer0, integer0, integer0, integer0, false, false, "");
      String string0 = randomSearchCriteria0.getFormat();
      assertFalse(randomSearchCriteria0.isShowStarredSongs());
      assertNotNull(string0);
      assertFalse(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(1, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getToYear();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      int int0 = randomSearchCriteria0.getCount();
      assertEquals(78, int0);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      String string0 = randomSearchCriteria0.getFormat();
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getMaxLastPlayedDate();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer(1726);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1726, "##e;[4F_<`LMQC", (Integer) null, integer0, linkedList0);
      Integer integer1 = randomSearchCriteria0.getMaxPlayCount();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(1726, randomSearchCriteria0.getCount());
      assertNull(integer1);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getMinPlayCount();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getMusicFolders();
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getFromYear();
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer((-613));
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria((-613), "DYe!3xC8b", integer0, integer0, linkedList0);
      randomSearchCriteria0.getMinLastPlayedDate();
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals((-613), randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      String string0 = randomSearchCriteria0.getGenre();
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      boolean boolean0 = randomSearchCriteria0.isShowStarredSongs();
      assertTrue(boolean0);
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      randomSearchCriteria0.getMaxAlbumRating();
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
      assertEquals(78, randomSearchCriteria0.getCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(78, "$", (Integer) null, (Integer) null, linkedList0);
      boolean boolean0 = randomSearchCriteria0.isShowUnstarredSongs();
      assertEquals(78, randomSearchCriteria0.getCount());
      assertTrue(boolean0);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(1726);
      LinkedList<MusicFolder> linkedList0 = new LinkedList<MusicFolder>();
      RandomSearchCriteria randomSearchCriteria0 = new RandomSearchCriteria(1726, "##e;[4F_<`LMQC", (Integer) null, integer0, linkedList0);
      Integer integer1 = randomSearchCriteria0.getMinAlbumRating();
      assertNull(integer1);
      assertTrue(randomSearchCriteria0.isShowStarredSongs());
      assertEquals(1726, randomSearchCriteria0.getCount());
      assertTrue(randomSearchCriteria0.isShowUnstarredSongs());
  }
}
