/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:18:12 GMT 2024
 */

package org.airsonic.player.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import org.airsonic.player.io.RangeOutputStream;
import org.airsonic.player.util.HttpRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RangeOutputStream_ESTest extends RangeOutputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      RangeOutputStream.wrap((OutputStream) null, httpRange0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(bufferedOutputStream0, httpRange0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)32;
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (-432), 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Long long0 = new Long(2);
      HttpRange httpRange0 = new HttpRange((-19L), long0);
      RangeOutputStream.wrap(pipedOutputStream0, httpRange0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(pipedOutputStream0, httpRange0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-35);
      rangeOutputStream0.write((int) (byte) (-35));
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      Long.compareUnsigned((byte)0, 2);
      Long.divideUnsigned(2199L, 135L);
      rangeOutputStream0.write(byteArray0, 0, (int) (byte) (-35));
      httpRange0.toString();
      Long.toUnsignedString((long) 822);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (int) (byte)0, 822);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      httpRange0.toString();
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(pipedOutputStream0, httpRange0);
      httpRange0.toString();
      pipedOutputStream0.flush();
      int int0 = 0;
      try { 
        rangeOutputStream0.write(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange((-1L), long0);
      OutputStream outputStream0 = RangeOutputStream.wrap(dataOutputStream0, httpRange0);
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(outputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange(0L, (Long) null);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream((OutputStream) null, httpRange0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-111);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-67);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (int) (byte)66, 3033);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.RangeOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Long long0 = new Long(2);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      RangeOutputStream.wrap(pipedOutputStream0, httpRange0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(pipedOutputStream0, httpRange0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-35);
      rangeOutputStream0.write((int) (byte) (-35));
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      Long.compareUnsigned((byte)0, 2);
      Long.divideUnsigned(2199L, 135L);
      rangeOutputStream0.write(byteArray0, 0, (int) (byte) (-35));
      httpRange0.toString();
      Long.toUnsignedString((long) 822);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (int) (byte)0, 822);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.airsonic.player.io.RangeOutputStream");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.airsonic.player.util.HttpRange";
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) "org.airsonic.player.util.HttpRange";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockFile0;
      objectArray0[6] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.printf("org.airsonic.player.util.HttpRange", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      HttpRange.valueOf("org.airsonic.player.util.HttpRange");
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(mockPrintStream1, (HttpRange) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (-166), (-166));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.RangeOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("RfrjgT");
      Long long0 = Long.getLong("RfrjgT", 2284L);
      HttpRange httpRange0 = new HttpRange(2284L, long0);
      mockPrintStream0.print((double) 2284L);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(mockPrintStream0, httpRange0);
      mockPrintStream0.print((-3213.3335F));
      byte[] byteArray0 = new byte[0];
      mockPrintStream0.print((-120L));
      Long.min(0L, 0L);
      rangeOutputStream0.write(byteArray0, 0, 0);
      OutputStream outputStream0 = RangeOutputStream.wrap(rangeOutputStream0, httpRange0);
      rangeOutputStream0.write(0);
      RangeOutputStream.wrap(mockPrintStream0, httpRange0);
      rangeOutputStream0.write((-1984));
      assertNotSame(rangeOutputStream0, outputStream0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("bytes=(d+)-(d*)", false);
      Long long0 = new Long(2890L);
      Long.compareUnsigned(0L, 0L);
      HttpRange httpRange0 = new HttpRange(2890L, long0);
      OutputStream outputStream0 = RangeOutputStream.wrap(mockFileOutputStream0, httpRange0);
      assertNotNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" -=mz1(KFEHthqK");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      Long long0 = new Long((-2518L));
      HttpRange httpRange0 = new HttpRange(0L, long0);
      Long.getLong("4_~>WxU'");
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(bufferedOutputStream0, httpRange0);
      rangeOutputStream0.write(613);
      rangeOutputStream0.pos = 0L;
      HttpRange.valueOf(" -=mz1(KFEHthqK");
      rangeOutputStream0.write((byte[]) null, (-1190), 2264);
      rangeOutputStream0.write(1838);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("s\" @2[<", "HZ[FtczyQ<@I=0pRk");
      mockFile0.setExecutable(true, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      Long long0 = new Long(1555L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      OutputStream outputStream0 = RangeOutputStream.wrap(mockFileOutputStream0, httpRange0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(outputStream0, httpRange0);
      rangeOutputStream0.flush();
      rangeOutputStream0.write(3027);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-37);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-29);
      try { 
        rangeOutputStream0.write(byteArray0, 0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.airsonic.player.io.RangeOutputStream");
      Long long0 = new Long(0L);
      Long.getLong("u_([jX5%@K.i]R|k92");
      HttpRange httpRange0 = new HttpRange(0L, long0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(mockPrintStream0, httpRange0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      rangeOutputStream0.write(byteArray0, 2020, 0);
      HttpRange.valueOf("org.airsonic.player.io.RangeOutputStream");
      rangeOutputStream0.write((-1417));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long((-1L));
      HttpRange httpRange0 = new HttpRange((-1L), long0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream((OutputStream) null, httpRange0);
      rangeOutputStream0.write(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputStream outputStream0 = null;
      HttpRange.valueOf("");
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream((OutputStream) null, (HttpRange) null);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.RangeOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      OutputStream outputStream0 = RangeOutputStream.wrap((OutputStream) null, httpRange0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(outputStream0, httpRange0);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write((-1822));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      Long long0 = new Long(2);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      OutputStream outputStream0 = RangeOutputStream.wrap(pipedOutputStream0, httpRange0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(pipedOutputStream0, httpRange0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-35);
      rangeOutputStream0.write((int) (byte) (-35));
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)0;
      Long.compareUnsigned((byte)0, 2);
      Long.divideUnsigned(2199L, 135L);
      rangeOutputStream0.write(byteArray0, 0, (int) (byte) (-35));
      RangeOutputStream.wrap(outputStream0, httpRange0);
      httpRange0.toString();
      Long.toUnsignedString((long) 822);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (int) (byte)0, 822);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Long long0 = new Long((-1L));
      HttpRange httpRange0 = new HttpRange((-1L), long0);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(mockPrintStream0, httpRange0);
      httpRange0.toString();
      rangeOutputStream0.write((-1));
      OutputStream outputStream0 = RangeOutputStream.wrap(rangeOutputStream0, httpRange0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      pipedOutputStream0.flush();
      byteArray0[2] = (byte)2;
      rangeOutputStream0.write(byteArray0, 0, (int) (byte)0);
      OutputStream outputStream1 = RangeOutputStream.wrap(mockPrintStream0, httpRange0);
      rangeOutputStream0.write(byteArray0, (-2590), (-1092));
      OutputStream outputStream2 = RangeOutputStream.wrap(rangeOutputStream0, httpRange0);
      rangeOutputStream0.write(1);
      RangeOutputStream.wrap(rangeOutputStream0, httpRange0);
      rangeOutputStream0.write((-2590));
      RangeOutputStream.wrap(outputStream1, httpRange0);
      rangeOutputStream0.write(byteArray0, (-1), (-1));
      assertNotSame(rangeOutputStream0, outputStream2);
      assertNotSame(rangeOutputStream0, outputStream0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange(0, (Long) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      RangeOutputStream.wrap(mockPrintStream0, httpRange0);
      HttpRange httpRange1 = HttpRange.valueOf("n7");
      assertNull(httpRange1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      String string0 = "gaJA1X]*r'qjo;P\\k~";
      Long.getLong("gaJA1X]*r'qjo;Pk~");
      HttpRange httpRange0 = new HttpRange((-1757), (Long) null);
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream(byteArrayOutputStream0, httpRange0);
      Long.compareUnsigned((-2591L), 745L);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)44;
      rangeOutputStream0.write(byteArray0);
      byteArray0[0] = (byte)44;
      httpRange0.toString();
      rangeOutputStream0.pos = (-1L);
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputStream outputStream0 = null;
      HttpRange.valueOf("org.airsonic.player.util.HttpRange");
      RangeOutputStream rangeOutputStream0 = new RangeOutputStream((OutputStream) null, (HttpRange) null);
      RangeOutputStream.wrap((OutputStream) null, (HttpRange) null);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-41);
      int int0 = 2048;
      // Undeclared exception!
      try { 
        rangeOutputStream0.write(byteArray0, 2048, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.io.RangeOutputStream", e);
      }
  }
}
