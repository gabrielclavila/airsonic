/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:48:35 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import org.airsonic.player.domain.VideoTranscodingSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VideoTranscodingSettings_ESTest extends VideoTranscodingSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(3218, 3218, 992, 0, true);
      boolean boolean0 = videoTranscodingSettings0.isHls();
      assertEquals(3218, videoTranscodingSettings0.getHeight());
      assertEquals(992, videoTranscodingSettings0.getTimeOffset());
      assertTrue(boolean0);
      assertEquals(0, videoTranscodingSettings0.getDuration());
      assertEquals(3218, videoTranscodingSettings0.getWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(0, 0, 0, 0, false);
      int int0 = videoTranscodingSettings0.getWidth();
      assertEquals(0, videoTranscodingSettings0.getHeight());
      assertEquals(0, videoTranscodingSettings0.getDuration());
      assertEquals(0, videoTranscodingSettings0.getTimeOffset());
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(3218, 3218, 992, 0, true);
      int int0 = videoTranscodingSettings0.getWidth();
      assertEquals(3218, int0);
      assertEquals(992, videoTranscodingSettings0.getTimeOffset());
      assertTrue(videoTranscodingSettings0.isHls());
      assertEquals(0, videoTranscodingSettings0.getDuration());
      assertEquals(3218, videoTranscodingSettings0.getHeight());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-3548), 0, 0, (-1893), false);
      int int0 = videoTranscodingSettings0.getTimeOffset();
      assertEquals(0, int0);
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals(0, videoTranscodingSettings0.getHeight());
      assertEquals((-3548), videoTranscodingSettings0.getWidth());
      assertEquals((-1893), videoTranscodingSettings0.getDuration());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(3218, 3218, 992, 0, true);
      int int0 = videoTranscodingSettings0.getTimeOffset();
      assertEquals(3218, videoTranscodingSettings0.getWidth());
      assertEquals(3218, videoTranscodingSettings0.getHeight());
      assertTrue(videoTranscodingSettings0.isHls());
      assertEquals(992, int0);
      assertEquals(0, videoTranscodingSettings0.getDuration());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-3548), 0, 0, (-1893), false);
      int int0 = videoTranscodingSettings0.getHeight();
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals((-3548), videoTranscodingSettings0.getWidth());
      assertEquals((-1893), videoTranscodingSettings0.getDuration());
      assertEquals(0, int0);
      assertEquals(0, videoTranscodingSettings0.getTimeOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(3218, 3218, 992, 0, true);
      int int0 = videoTranscodingSettings0.getHeight();
      assertTrue(videoTranscodingSettings0.isHls());
      assertEquals(3218, int0);
      assertEquals(3218, videoTranscodingSettings0.getWidth());
      assertEquals(0, videoTranscodingSettings0.getDuration());
      assertEquals(992, videoTranscodingSettings0.getTimeOffset());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(3218, 3218, 992, 0, true);
      int int0 = videoTranscodingSettings0.getDuration();
      assertEquals(0, int0);
      assertEquals(992, videoTranscodingSettings0.getTimeOffset());
      assertTrue(videoTranscodingSettings0.isHls());
      assertEquals(3218, videoTranscodingSettings0.getWidth());
      assertEquals(3218, videoTranscodingSettings0.getHeight());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings(1, 1, 607, 1, false);
      int int0 = videoTranscodingSettings0.getDuration();
      assertEquals(607, videoTranscodingSettings0.getTimeOffset());
      assertEquals(1, int0);
      assertEquals(1, videoTranscodingSettings0.getHeight());
      assertEquals(1, videoTranscodingSettings0.getWidth());
      assertFalse(videoTranscodingSettings0.isHls());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-2069), (-2069), (-1432), (-2069), false);
      int int0 = videoTranscodingSettings0.getHeight();
      assertEquals((-1432), videoTranscodingSettings0.getTimeOffset());
      assertEquals((-2069), int0);
      assertEquals((-2069), videoTranscodingSettings0.getWidth());
      assertEquals((-2069), videoTranscodingSettings0.getDuration());
      assertFalse(videoTranscodingSettings0.isHls());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-2069), (-2069), (-1432), (-2069), false);
      int int0 = videoTranscodingSettings0.getTimeOffset();
      assertEquals((-2069), videoTranscodingSettings0.getHeight());
      assertEquals((-1432), int0);
      assertEquals((-2069), videoTranscodingSettings0.getDuration());
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals((-2069), videoTranscodingSettings0.getWidth());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-2069), (-2069), (-1432), (-2069), false);
      boolean boolean0 = videoTranscodingSettings0.isHls();
      assertEquals((-1432), videoTranscodingSettings0.getTimeOffset());
      assertFalse(boolean0);
      assertEquals((-2069), videoTranscodingSettings0.getHeight());
      assertEquals((-2069), videoTranscodingSettings0.getWidth());
      assertEquals((-2069), videoTranscodingSettings0.getDuration());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-2069), (-2069), (-1432), (-2069), false);
      int int0 = videoTranscodingSettings0.getDuration();
      assertEquals((-1432), videoTranscodingSettings0.getTimeOffset());
      assertEquals((-2069), int0);
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals((-2069), videoTranscodingSettings0.getHeight());
      assertEquals((-2069), videoTranscodingSettings0.getWidth());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VideoTranscodingSettings videoTranscodingSettings0 = new VideoTranscodingSettings((-2069), (-2069), (-1432), (-2069), false);
      int int0 = videoTranscodingSettings0.getWidth();
      assertEquals((-2069), int0);
      assertEquals((-2069), videoTranscodingSettings0.getHeight());
      assertEquals((-2069), videoTranscodingSettings0.getDuration());
      assertFalse(videoTranscodingSettings0.isHls());
      assertEquals((-1432), videoTranscodingSettings0.getTimeOffset());
  }
}
