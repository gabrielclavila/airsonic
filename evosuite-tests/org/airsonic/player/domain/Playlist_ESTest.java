/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:50:21 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.airsonic.player.domain.Playlist;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Playlist_ESTest extends Playlist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0);
      Playlist playlist0 = new Playlist(1530, "org.airsonic.player.domain.Playlist", true, (String) null, (String) null, 1530, (-1), (Date) null, mockDate0, "T");
      String string0 = playlist0.getUsername();
      assertEquals((-1), playlist0.getDurationSeconds());
      assertEquals(1530, playlist0.getFileCount());
      assertTrue(playlist0.isShared());
      assertEquals(1530, playlist0.getId());
      assertNotNull(string0);
      assertEquals("T", playlist0.getImportedFrom());
      assertEquals("org.airsonic.player.domain.Playlist", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1L));
      Playlist playlist0 = new Playlist(2647, "", false, "Zy*I@lpH;G:", "Zy*I@lpH;G:", 0, 2647, mockDate0, mockDate0, "");
      String string0 = playlist0.getUsername();
      assertEquals(2647, playlist0.getId());
      assertEquals("Zy*I@lpH;G:", playlist0.getComment());
      assertEquals(0, playlist0.getFileCount());
      assertEquals(2647, playlist0.getDurationSeconds());
      assertEquals("Zy*I@lpH;G:", playlist0.getName());
      assertFalse(playlist0.isShared());
      assertEquals("", string0);
      assertEquals("", playlist0.getImportedFrom());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setName("+:");
      String string0 = playlist0.getName();
      assertEquals("+:", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1211), (-121), (-46));
      Playlist playlist0 = new Playlist((-1211), "", true, "", "", (-46), (-1211), mockDate0, mockDate0, "");
      playlist0.getName();
      assertEquals((-46), playlist0.getFileCount());
      assertEquals((-1211), playlist0.getId());
      assertEquals((-1211), playlist0.getDurationSeconds());
      assertTrue(playlist0.isShared());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setImportedFrom("21glF *<i;?cG+");
      String string0 = playlist0.getImportedFrom();
      assertEquals("21glF *<i;?cG+", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-912), (-912), (-700), 0, 619);
      Playlist playlist0 = new Playlist((-912), "K7m", true, "K7m", "\"zLMlq9zCQ", (-912), (-912), mockDate0, mockDate0, "");
      String string0 = playlist0.getImportedFrom();
      assertEquals((-912), playlist0.getId());
      assertEquals((-912), playlist0.getDurationSeconds());
      assertEquals("\"zLMlq9zCQ", playlist0.getComment());
      assertEquals("K7m", playlist0.getName());
      assertEquals((-912), playlist0.getFileCount());
      assertTrue(playlist0.isShared());
      assertEquals("", string0);
      assertEquals("K7m", playlist0.getUsername());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setId(864);
      int int0 = playlist0.getId();
      assertEquals(864, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setId((-1));
      int int0 = playlist0.getId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-912), (-912), (-700), 0, 619);
      Playlist playlist0 = new Playlist((-912), "K7m", true, "K7m", "\"zLMlq9zCQ", (-912), (-912), mockDate0, mockDate0, "");
      int int0 = playlist0.getFileCount();
      assertEquals("\"zLMlq9zCQ", playlist0.getComment());
      assertEquals("K7m", playlist0.getName());
      assertEquals("K7m", playlist0.getUsername());
      assertTrue(playlist0.isShared());
      assertEquals("", playlist0.getImportedFrom());
      assertEquals((-912), int0);
      assertEquals((-912), playlist0.getId());
      assertEquals((-912), playlist0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Playlist playlist0 = new Playlist((-4852), "|U>W&Si`*i", true, "|U>W&Si`*i", "", (-4852), (-4852), mockDate0, mockDate0, "");
      int int0 = playlist0.getDurationSeconds();
      assertEquals((-4852), playlist0.getFileCount());
      assertEquals("", playlist0.getComment());
      assertEquals("|U>W&Si`*i", playlist0.getName());
      assertTrue(playlist0.isShared());
      assertEquals("", playlist0.getImportedFrom());
      assertEquals("|U>W&Si`*i", playlist0.getUsername());
      assertEquals((-4852), int0);
      assertEquals((-4852), playlist0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Playlist playlist0 = new Playlist((-4852), "|U>W&Si`*i", true, "|U>W&Si`*i", "", (-4852), (-4852), mockDate0, mockDate0, "");
      playlist0.getCreated();
      assertEquals("", playlist0.getComment());
      assertEquals((-4852), playlist0.getDurationSeconds());
      assertEquals("|U>W&Si`*i", playlist0.getUsername());
      assertEquals((-4852), playlist0.getFileCount());
      assertEquals("|U>W&Si`*i", playlist0.getName());
      assertEquals("", playlist0.getImportedFrom());
      assertEquals((-4852), playlist0.getId());
      assertTrue(playlist0.isShared());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setComment("@0qEZx]c");
      String string0 = playlist0.getComment();
      assertEquals("@0qEZx]c", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Playlist playlist0 = new Playlist(2106, "/ce7>Q=q+\"n", false, "/ce7>Q=q+\"n", "lrr{+Op7w&.4z", 2106, 2106, (Date) null, (Date) null, "lrr{+Op7w&.4z");
      assertEquals("lrr{+Op7w&.4z", playlist0.getComment());
      
      playlist0.setComment("");
      playlist0.getComment();
      assertEquals("/ce7>Q=q+\"n", playlist0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3402, 1424, 1424, 16, 3402);
      Playlist playlist0 = new Playlist(3402, "i", false, "i", "i", 1424, 16, mockDate0, mockDate0, "i");
      playlist0.getChanged();
      assertFalse(playlist0.isShared());
      assertEquals(3402, playlist0.getId());
      assertEquals(16, playlist0.getDurationSeconds());
      assertEquals(1424, playlist0.getFileCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setDurationSeconds((-2318));
      // Undeclared exception!
      try { 
        playlist0.getDurationAsString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // seconds must be >= 0
         //
         verifyException("org.airsonic.player.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getImportedFrom();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getDurationAsString();
      assertEquals("0:00", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      int int0 = playlist0.getFileCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setUsername((String) null);
      assertEquals(0, playlist0.getDurationSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getComment();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      Date date0 = playlist0.getChanged();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      boolean boolean0 = playlist0.isShared();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setShared(true);
      boolean boolean0 = playlist0.isShared();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      Date date0 = playlist0.getCreated();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      int int0 = playlist0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      MockDate mockDate0 = new MockDate();
      playlist0.setCreated(mockDate0);
      assertNull(playlist0.getUsername());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      String string0 = playlist0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setFileCount(8);
      int int0 = playlist0.getFileCount();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      int int0 = playlist0.getDurationSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setChanged((Date) null);
      assertNull(playlist0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Playlist playlist0 = new Playlist();
      playlist0.setDurationSeconds(39);
      int int0 = playlist0.getDurationSeconds();
      assertEquals(39, int0);
  }
}
