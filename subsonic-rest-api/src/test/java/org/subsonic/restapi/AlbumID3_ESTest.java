/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:52:26 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.AlbumID3;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AlbumID3_ESTest extends AlbumID3_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Integer integer0 = new Integer(0);
      albumID3_0.setYear(integer0);
      Integer integer1 = albumID3_0.getYear();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Integer integer0 = new Integer(540);
      albumID3_0.setYear(integer0);
      Integer integer1 = albumID3_0.getYear();
      assertEquals(540, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Integer integer0 = Integer.valueOf((-1285));
      albumID3_0.setYear(integer0);
      Integer integer1 = albumID3_0.getYear();
      assertEquals((-1285), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setSongCount(540);
      int int0 = albumID3_0.getSongCount();
      assertEquals(540, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.songCount = (-1285);
      int int0 = albumID3_0.getSongCount();
      assertEquals((-1285), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Long long0 = new Long(0L);
      albumID3_0.setPlayCount(long0);
      Long long1 = albumID3_0.getPlayCount();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Long long0 = new Long(843L);
      albumID3_0.setPlayCount(long0);
      Long long1 = albumID3_0.getPlayCount();
      assertEquals(843L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Long long0 = new Long((-1810L));
      albumID3_0.setPlayCount(long0);
      Long long1 = albumID3_0.getPlayCount();
      assertEquals((-1810L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setName("z{sO^\"A\".#8");
      String string0 = albumID3_0.getName();
      assertEquals("z{sO^\"A\".#8", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.name = "";
      String string0 = albumID3_0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.id = "<-";
      String string0 = albumID3_0.getId();
      assertEquals("<-", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setId("");
      String string0 = albumID3_0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setGenre("SG:|-.=@y");
      String string0 = albumID3_0.getGenre();
      assertEquals("SG:|-.=@y", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.genre = "";
      String string0 = albumID3_0.getGenre();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setDuration(540);
      int int0 = albumID3_0.getDuration();
      assertEquals(540, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setDuration((-2653));
      int int0 = albumID3_0.getDuration();
      assertEquals((-2653), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.coverArt = "X9guzTbHb";
      String string0 = albumID3_0.getCoverArt();
      assertEquals("X9guzTbHb", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setCoverArt("");
      String string0 = albumID3_0.getCoverArt();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.artistId = "";
      String string0 = albumID3_0.getArtistId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setArtist("org.subsonic.restapi.AlbumWithSongsID3");
      String string0 = albumID3_0.getArtist();
      assertEquals("org.subsonic.restapi.AlbumWithSongsID3", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setArtist("");
      String string0 = albumID3_0.getArtist();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Integer integer0 = albumID3_0.getYear();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getGenre();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      Long long0 = albumID3_0.getPlayCount();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setStarred((XMLGregorianCalendar) null);
      assertEquals(0, albumID3_0.getDuration());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setArtistId("org.subsonic.restapi.AlbumID3");
      String string0 = albumID3_0.getArtistId();
      assertEquals("org.subsonic.restapi.AlbumID3", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      int int0 = albumID3_0.getSongCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      albumID3_0.setCreated((XMLGregorianCalendar) null);
      assertNull(albumID3_0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getArtist();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      XMLGregorianCalendar xMLGregorianCalendar0 = albumID3_0.getCreated();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getCoverArt();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      int int0 = albumID3_0.getDuration();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      XMLGregorianCalendar xMLGregorianCalendar0 = albumID3_0.getStarred();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AlbumID3 albumID3_0 = new AlbumID3();
      String string0 = albumID3_0.getArtistId();
      assertNull(string0);
  }
}
