/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:13:48 GMT 2024
 */

package org.airsonic.player.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.command.MusicFolderSettingsCommand;
import org.airsonic.player.domain.MusicFolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MusicFolderSettingsCommand_ESTest extends MusicFolderSettingsCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setOrganizeByFolderStructure(true);
      boolean boolean0 = musicFolderSettingsCommand0.isOrganizeByFolderStructure();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setNewMusicFolder(musicFolderSettingsCommand_MusicFolderInfo0);
      musicFolderSettingsCommand_MusicFolderInfo0.setDelete(true);
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isDelete());
      
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo1 = musicFolderSettingsCommand0.getNewMusicFolder();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo1.isEnabled());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      MockFile mockFile0 = new MockFile("", "");
      MockDate mockDate0 = new MockDate(2241, 2241, 1, 2241, 574);
      MusicFolder musicFolder0 = new MusicFolder(mockFile0, "doU1Sm@Ie/c", false, mockDate0);
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo(musicFolder0);
      musicFolderSettingsCommand0.setNewMusicFolder(musicFolderSettingsCommand_MusicFolderInfo0);
      musicFolderSettingsCommand0.getNewMusicFolder();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      LinkedList<MusicFolderSettingsCommand.MusicFolderInfo> linkedList0 = new LinkedList<MusicFolderSettingsCommand.MusicFolderInfo>();
      musicFolderSettingsCommand0.setMusicFolders(linkedList0);
      List<MusicFolderSettingsCommand.MusicFolderInfo> list0 = musicFolderSettingsCommand0.getMusicFolders();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      MockFile mockFile0 = new MockFile("lPEf{2ishHH[");
      MusicFolder musicFolder0 = new MusicFolder(mockFile0, "lPEf{2ishHH[", false, (Date) null);
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo(musicFolder0);
      LinkedList<MusicFolderSettingsCommand.MusicFolderInfo> linkedList0 = new LinkedList<MusicFolderSettingsCommand.MusicFolderInfo>();
      linkedList0.add(musicFolderSettingsCommand_MusicFolderInfo0);
      musicFolderSettingsCommand0.setMusicFolders(linkedList0);
      musicFolderSettingsCommand0.getMusicFolders();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setInterval("Lk;C8)ul*!aipioz");
      String string0 = musicFolderSettingsCommand0.getInterval();
      assertEquals("Lk;C8)ul*!aipioz", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setInterval("");
      String string0 = musicFolderSettingsCommand0.getInterval();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setHour("2Z{iS/|o:");
      String string0 = musicFolderSettingsCommand0.getHour();
      assertEquals("2Z{iS/|o:", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setHour("");
      String string0 = musicFolderSettingsCommand0.getHour();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setExcludePatternString("Lk;C8)ul*!aipioz");
      String string0 = musicFolderSettingsCommand0.getExcludePatternString();
      assertEquals("Lk;C8)ul*!aipioz", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setExcludePatternString("");
      String string0 = musicFolderSettingsCommand0.getExcludePatternString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MockFile mockFile0 = new MockFile("M_%", "M_%");
      File file0 = MockFile.createTempFile("M_%", "M_%", (File) mockFile0);
      MusicFolder musicFolder0 = new MusicFolder(file0, "M_%", true, mockDate0);
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo(musicFolder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":&5; ");
      MusicFolder musicFolder0 = new MusicFolder(mockFile0, ":&5; ", false, (Date) null);
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo(musicFolder0);
      // Undeclared exception!
      try { 
        musicFolderSettingsCommand_MusicFolderInfo0.toMusicFolder();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang/StringUtils
         //
         verifyException("org.airsonic.player.command.MusicFolderSettingsCommand$MusicFolderInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.isDelete();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.setPath("org.airsonic.player.domain.MusicFolder");
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      Integer integer0 = new Integer(1);
      musicFolderSettingsCommand_MusicFolderInfo0.setId(integer0);
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.setName("GkwB.t");
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.getPath();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      boolean boolean0 = musicFolderSettingsCommand_MusicFolderInfo0.isEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.getId();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.getName();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.isExisting();
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = new MusicFolderSettingsCommand.MusicFolderInfo();
      musicFolderSettingsCommand_MusicFolderInfo0.setEnabled(true);
      assertTrue(musicFolderSettingsCommand_MusicFolderInfo0.isEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      String string0 = musicFolderSettingsCommand0.getInterval();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setFastCache(true);
      boolean boolean0 = musicFolderSettingsCommand0.isFastCache();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setIgnoreSymLinks(true);
      boolean boolean0 = musicFolderSettingsCommand0.getIgnoreSymLinks();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      boolean boolean0 = musicFolderSettingsCommand0.getIgnoreSymLinks();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      boolean boolean0 = musicFolderSettingsCommand0.isScanning();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      boolean boolean0 = musicFolderSettingsCommand0.isFastCache();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      musicFolderSettingsCommand0.setScanning(true);
      boolean boolean0 = musicFolderSettingsCommand0.isScanning();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      String string0 = musicFolderSettingsCommand0.getHour();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      boolean boolean0 = musicFolderSettingsCommand0.isOrganizeByFolderStructure();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      MusicFolderSettingsCommand.MusicFolderInfo musicFolderSettingsCommand_MusicFolderInfo0 = musicFolderSettingsCommand0.getNewMusicFolder();
      assertNull(musicFolderSettingsCommand_MusicFolderInfo0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      String string0 = musicFolderSettingsCommand0.getExcludePatternString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MusicFolderSettingsCommand musicFolderSettingsCommand0 = new MusicFolderSettingsCommand();
      List<MusicFolderSettingsCommand.MusicFolderInfo> list0 = musicFolderSettingsCommand0.getMusicFolders();
      assertNull(list0);
  }
}
