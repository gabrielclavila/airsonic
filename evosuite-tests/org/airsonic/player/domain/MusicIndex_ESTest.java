/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:53:42 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.text.Collator;
import java.util.List;
import org.airsonic.player.domain.Artist;
import org.airsonic.player.domain.MediaFile;
import org.airsonic.player.domain.MusicIndex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MusicIndex_ESTest extends MusicIndex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Artist artist0 = new Artist();
      Collator collator0 = Collator.getInstance();
      MusicIndex.SortableArtistWithArtist musicIndex_SortableArtistWithArtist0 = new MusicIndex.SortableArtistWithArtist("a![3TZz", "?>/;b5", artist0, collator0);
      MusicIndex.SortableArtistWithArtist musicIndex_SortableArtistWithArtist1 = new MusicIndex.SortableArtistWithArtist("$VALUES", "a![3TZz", artist0, collator0);
      int int0 = musicIndex_SortableArtistWithArtist0.compareTo((MusicIndex.SortableArtist) musicIndex_SortableArtistWithArtist1);
      assertEquals((-1), int0);
      assertEquals("$VALUES", musicIndex_SortableArtistWithArtist1.getName());
      assertEquals("a![3TZz", musicIndex_SortableArtistWithArtist1.getSortableName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MusicIndex musicIndex0 = new MusicIndex((String) null);
      String string0 = musicIndex0.getIndex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MusicIndex musicIndex0 = new MusicIndex("");
      String string0 = musicIndex0.getIndex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MusicIndex musicIndex0 = new MusicIndex((String) null);
      musicIndex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MusicIndex musicIndex0 = new MusicIndex((String) null);
      boolean boolean0 = musicIndex0.equals(musicIndex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MusicIndex musicIndex0 = MusicIndex.OTHER;
      boolean boolean0 = musicIndex0.equals("F\"+~SH/0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      MediaFile mediaFile0 = new MediaFile();
      MusicIndex.SortableArtistWithMediaFiles musicIndex_SortableArtistWithMediaFiles0 = new MusicIndex.SortableArtistWithMediaFiles("F\"+~SH/0", "F\"+~SH/0", collator0);
      musicIndex_SortableArtistWithMediaFiles0.addMediaFile(mediaFile0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      MusicIndex.SortableArtistWithMediaFiles musicIndex_SortableArtistWithMediaFiles0 = new MusicIndex.SortableArtistWithMediaFiles("F\"+~SH/0", "F\"+~SH/0", collator0);
      List<MediaFile> list0 = musicIndex_SortableArtistWithMediaFiles0.getMediaFiles();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Artist artist0 = new Artist();
      MusicIndex.SortableArtistWithArtist musicIndex_SortableArtistWithArtist0 = new MusicIndex.SortableArtistWithArtist("F\"+~SH/0", "F\"+~SH/0", artist0, collator0);
      Artist artist1 = musicIndex_SortableArtistWithArtist0.getArtist();
      assertEquals(0, artist1.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      Artist artist0 = new Artist();
      MusicIndex.SortableArtistWithArtist musicIndex_SortableArtistWithArtist0 = new MusicIndex.SortableArtistWithArtist("F\"+~SH/0", "F\"+~SH/0", artist0, collator0);
      String string0 = musicIndex_SortableArtistWithArtist0.getSortableName();
      assertEquals("F\"+~SH/0", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Collator collator0 = Collator.getInstance();
      MusicIndex.SortableArtistWithMediaFiles musicIndex_SortableArtistWithMediaFiles0 = new MusicIndex.SortableArtistWithMediaFiles("F\"+~SH/0", "F\"+~SH/0", collator0);
      String string0 = musicIndex_SortableArtistWithMediaFiles0.getName();
      assertEquals("F\"+~SH/0", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MusicIndex musicIndex0 = MusicIndex.OTHER;
      String string0 = musicIndex0.getIndex();
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MusicIndex musicIndex0 = MusicIndex.OTHER;
      musicIndex0.addPrefix("F\"+~SH/0");
      List<String> list0 = musicIndex0.getPrefixes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MusicIndex musicIndex0 = new MusicIndex("|36Zozuu>>Tt");
      musicIndex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MusicIndex musicIndex0 = MusicIndex.OTHER;
      List<String> list0 = musicIndex0.getPrefixes();
      assertEquals(0, list0.size());
  }
}
