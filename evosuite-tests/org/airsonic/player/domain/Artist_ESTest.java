/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:11:34 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.Instant;
import java.util.Date;
import org.airsonic.player.domain.Artist;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Artist_ESTest extends Artist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setPresent(true);
      boolean boolean0 = artist0.isPresent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Artist artist0 = new Artist(263, "", (String) null, 1, (Date) null, false, integer0);
      String string0 = artist0.getName();
      assertNotNull(string0);
      assertEquals(1, artist0.getAlbumCount());
      assertFalse(artist0.isPresent());
      assertEquals(263, artist0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-4011), 1, 0, 1, 0);
      Integer integer0 = new Integer(0);
      Artist artist0 = new Artist((-4011), "org.airsonic.player.domain.Artist", "mepGRSD!*/<``^GW)", (-4011), mockDate0, true, integer0);
      artist0.getLastScanned();
      assertTrue(artist0.isPresent());
      assertEquals("org.airsonic.player.domain.Artist", artist0.getName());
      assertEquals((-4011), artist0.getAlbumCount());
      assertEquals((-4011), artist0.getId());
      assertEquals("mepGRSD!*/<``^GW)", artist0.getCoverArtPath());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Artist artist0 = new Artist();
      int int0 = artist0.getId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Integer integer0 = new Integer(1);
      Artist artist0 = new Artist(505, "@u[c8XK", "@u[c8XK", 505, mockDate0, false, integer0);
      int int0 = artist0.getId();
      assertEquals(505, artist0.getAlbumCount());
      assertEquals(505, int0);
      assertFalse(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Artist artist0 = new Artist(263, "", (String) null, 1, (Date) null, false, integer0);
      artist0.getFolderId();
      assertEquals(1, artist0.getAlbumCount());
      assertEquals(263, artist0.getId());
      assertFalse(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, (-2697), 0, 1);
      Integer integer0 = new Integer((-2697));
      Artist artist0 = new Artist(0, "org.airsonic.player.domain.Artist", "", 0, mockDate0, true, integer0);
      artist0.getFolderId();
      assertEquals("", artist0.getCoverArtPath());
      assertEquals(0, artist0.getAlbumCount());
      assertEquals(0, artist0.getId());
      assertTrue(artist0.isPresent());
      assertEquals("org.airsonic.player.domain.Artist", artist0.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Artist artist0 = new Artist();
      Integer integer0 = new Integer(1500);
      artist0.setFolderId(integer0);
      Integer integer1 = artist0.getFolderId();
      assertEquals(1500, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1167), 0, (-1167));
      Integer integer0 = new Integer((-1167));
      Artist artist0 = new Artist((-1167), "^};\u0005`u0w\".\"?h]e", "^};\u0005`u0w\".\"?h]e", (-1167), mockDate0, true, integer0);
      artist0.getCoverArtPath();
      assertEquals((-1167), artist0.getAlbumCount());
      assertEquals((-1167), artist0.getId());
      assertTrue(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, (-964), 2875, 2875);
      Integer integer0 = new Integer((-466));
      Artist artist0 = new Artist((-964), (String) null, "", 1, mockDate0, true, integer0);
      String string0 = artist0.getCoverArtPath();
      assertEquals(1, artist0.getAlbumCount());
      assertNotNull(string0);
      assertEquals((-964), artist0.getId());
      assertTrue(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      Integer integer0 = new Integer(1);
      Artist artist0 = new Artist(1, "", "", 1, date0, true, integer0);
      int int0 = artist0.getAlbumCount();
      assertEquals(1, artist0.getId());
      assertEquals(1, int0);
      assertTrue(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Artist artist0 = new Artist();
      Integer integer0 = artist0.getFolderId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setLastScanned((Date) null);
      assertEquals(0, artist0.getAlbumCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setId(0);
      assertEquals(0, artist0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, 1, 1, (-964), 2875, 2875);
      Integer integer0 = new Integer((-466));
      Artist artist0 = new Artist((-964), (String) null, "", 1, mockDate0, true, integer0);
      int int0 = artist0.getId();
      assertEquals((-964), int0);
      assertEquals(1, artist0.getAlbumCount());
      assertTrue(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Artist artist0 = new Artist();
      Date date0 = artist0.getLastScanned();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Artist artist0 = new Artist();
      int int0 = artist0.getAlbumCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Artist artist0 = new Artist();
      String string0 = artist0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setName("MM ]");
      String string0 = artist0.getName();
      assertEquals("MM ]", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Artist artist0 = new Artist();
      String string0 = artist0.getCoverArtPath();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Artist artist0 = new Artist();
      boolean boolean0 = artist0.isPresent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1, (-4011), 1, 0, 1, 0);
      Integer integer0 = new Integer(0);
      Artist artist0 = new Artist((-4011), "org.airsonic.player.domain.Artist", "mepGRSD!*/<``^GW)", (-4011), mockDate0, true, integer0);
      int int0 = artist0.getAlbumCount();
      assertEquals("org.airsonic.player.domain.Artist", artist0.getName());
      assertEquals((-4011), artist0.getId());
      assertEquals("mepGRSD!*/<``^GW)", artist0.getCoverArtPath());
      assertEquals((-4011), int0);
      assertTrue(artist0.isPresent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setCoverArtPath("Az.al\"{Ume4NH2q}M\"");
      assertEquals(0, artist0.getAlbumCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Artist artist0 = new Artist();
      artist0.setAlbumCount(0);
      assertEquals(0, artist0.getAlbumCount());
  }
}
