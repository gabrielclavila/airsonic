/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:04:23 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.domain.SavedPlayQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SavedPlayQueue_ESTest extends SavedPlayQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Long long0 = new Long(1);
      MockDate mockDate0 = new MockDate(0, 0, 1, 1, (-3135), (-238));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, (String) null, (List<Integer>) null, integer0, long0, mockDate0, (String) null);
      String string0 = savedPlayQueue0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-4877));
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate((-4877), (-4877), (-4877), (-4877), (-4877));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, "", linkedList0, integer0, long0, mockDate0, "");
      String string0 = savedPlayQueue0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = Integer.getInteger("", 0);
      MockDate mockDate0 = new MockDate(0, (-2442), 0, 2024, (-2803));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, "x", linkedList0, integer0, (Long) null, mockDate0, (String) null);
      Long long0 = savedPlayQueue0.getPositionMillis();
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-1L));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, (String) null, linkedList0, (Integer) null, long0, (Date) null, (String) null);
      Long long1 = savedPlayQueue0.getPositionMillis();
      assertEquals((-1L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate();
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", (List<Integer>) null, integer0, long0, mockDate0, "");
      Long long1 = savedPlayQueue0.getPositionMillis();
      assertEquals(0L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-2691));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(1L);
      MockDate mockDate0 = new MockDate((-2691), 346, (-1));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "kfCE[3B6(1k`A", linkedList0, integer0, long0, mockDate0, "'<GpAA3l+L~3\"4:kt4");
      savedPlayQueue0.getPositionMillis();
      assertEquals("'<GpAA3l+L~3\"4:kt4", savedPlayQueue0.getChangedBy());
      assertEquals("kfCE[3B6(1k`A", savedPlayQueue0.getUsername());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate();
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", (List<Integer>) null, integer0, long0, mockDate0, "");
      List<Integer> list0 = savedPlayQueue0.getMediaFileIds();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1061));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      Long long0 = new Long((-1061));
      MockDate mockDate0 = new MockDate((-1061), (-1061), 1280);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "VgHVI", linkedList0, integer0, long0, mockDate0, "");
      savedPlayQueue0.getMediaFileIds();
      assertEquals("VgHVI", savedPlayQueue0.getUsername());
      assertEquals("", savedPlayQueue0.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = Integer.getInteger(",Q&>]5YD@M");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = Long.getLong("", (-532L));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, ",Q&>]5YD@M", linkedList0, integer0, long0, (Date) null, ",Q&>]5YD@M");
      Integer integer1 = savedPlayQueue0.getId();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1061));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-1061));
      MockDate mockDate0 = new MockDate((-1061), (-1061), 1280);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "VgHVI", linkedList0, integer0, long0, mockDate0, "");
      savedPlayQueue0.getId();
      assertEquals("", savedPlayQueue0.getChangedBy());
      assertEquals("VgHVI", savedPlayQueue0.getUsername());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(0);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", linkedList0, integer0, long0, (Date) null, "");
      Integer integer1 = savedPlayQueue0.getId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(1266);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(1266);
      MockDate mockDate0 = new MockDate(0, 1266, 1266);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "+!V4|jVsdKS9", linkedList0, integer0, long0, mockDate0, "+!V4|jVsdKS9");
      Integer integer1 = savedPlayQueue0.getId();
      assertEquals(1266, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer(655);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(487L);
      MockDate mockDate0 = new MockDate(487L);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", linkedList0, (Integer) null, long0, mockDate0, "");
      Integer integer1 = savedPlayQueue0.getCurrentMediaFileId();
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(0);
      MockDate mockDate0 = new MockDate(0, 4057, 0, 0, (-1));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", linkedList0, integer0, long0, mockDate0, "\"q8S8G5Gx Q>4SVe:2z");
      savedPlayQueue0.getCurrentMediaFileId();
      assertEquals("\"q8S8G5Gx Q>4SVe:2z", savedPlayQueue0.getChangedBy());
      assertEquals("", savedPlayQueue0.getUsername());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Long long0 = new Long((-1));
      MockDate mockDate0 = new MockDate((-1), 1, (-1), (-1), (-1));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "LTAad1:M", (List<Integer>) null, integer0, long0, mockDate0, "LTAad1:M");
      Integer integer1 = savedPlayQueue0.getCurrentMediaFileId();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer(2193);
      Long long0 = new Long(2193);
      MockDate mockDate0 = new MockDate((-3423), (-3423), 2193);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, (String) null, (List<Integer>) null, integer0, long0, mockDate0, (String) null);
      String string0 = savedPlayQueue0.getChangedBy();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer((-1061));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-1061));
      MockDate mockDate0 = new MockDate((-1061), (-1061), 1280);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "VgHVI", linkedList0, integer0, long0, mockDate0, "");
      String string0 = savedPlayQueue0.getChangedBy();
      assertEquals("VgHVI", savedPlayQueue0.getUsername());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(0);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", linkedList0, integer0, long0, (Date) null, "");
      Date date0 = savedPlayQueue0.getChanged();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-2778L));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, "TIJ8*,Vg_ch[", linkedList0, (Integer) null, long0, (Date) null, "TIJ8*,Vg_ch[");
      String string0 = savedPlayQueue0.getUsername();
      assertEquals("TIJ8*,Vg_ch[", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-647));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(4120L);
      MockDate mockDate0 = new MockDate((-647), (-647), (-647));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, (String) null, linkedList0, integer0, long0, mockDate0, (String) null);
      savedPlayQueue0.setCurrentMediaFileId(integer0);
      assertEquals((-647), (int)savedPlayQueue0.getId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(2346);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-426L));
      MockDate mockDate0 = new MockDate(2346, 2346, 2346, 2346, 2346);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "org.airsonic.player.domain.SavedPlayQueue", linkedList0, integer0, long0, mockDate0, "org.airsonic.player.domain.SavedPlayQueue");
      savedPlayQueue0.setChanged(mockDate0);
      assertEquals((-426L), (long)savedPlayQueue0.getPositionMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(292);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(292);
      MockDate mockDate0 = new MockDate(292, 0, 292, 0, 292, 292);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "W<fL'gY<5", linkedList0, integer0, long0, mockDate0, "W<fL'gY<5");
      Date date0 = savedPlayQueue0.getChanged();
      assertSame(mockDate0, date0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(1L);
      MockDate mockDate0 = new MockDate(1L);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, "", linkedList0, (Integer) null, long0, mockDate0, "");
      savedPlayQueue0.setChangedBy("");
      assertEquals(1L, (long)savedPlayQueue0.getPositionMillis());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(0);
      MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "cW)hH ", linkedList0, integer0, long0, mockDate0, "cW)hH ");
      savedPlayQueue0.setId(integer0);
      assertEquals(0L, (long)savedPlayQueue0.getPositionMillis());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1487));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = Long.getLong("Y", (long) (-1487));
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "Y", linkedList0, integer0, long0, (Date) null, "");
      savedPlayQueue0.getMediaFileIds();
      assertEquals("Y", savedPlayQueue0.getUsername());
      assertEquals("", savedPlayQueue0.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(11L);
      MockDate mockDate0 = new MockDate((-3097), 3120, (-3097), 1, 3120);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "", linkedList0, integer0, long0, mockDate0, "");
      savedPlayQueue0.setUsername("E{ctL+ ");
      assertEquals(1, (int)savedPlayQueue0.getId());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer(2914);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(2914);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "B%,KBLhk", linkedList0, integer0, long0, (Date) null, "");
      savedPlayQueue0.setPositionMillis(long0);
      assertEquals("", savedPlayQueue0.getChangedBy());
      assertEquals("B%,KBLhk", savedPlayQueue0.getUsername());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(2346);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-426L));
      MockDate mockDate0 = new MockDate(2346, 2346, 2346, 2346, 2346);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "org.airsonic.player.domain.SavedPlayQueue", linkedList0, integer0, long0, mockDate0, "org.airsonic.player.domain.SavedPlayQueue");
      Integer integer1 = savedPlayQueue0.getId();
      assertEquals(2346, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(0L);
      MockDate mockDate0 = new MockDate((-2193), (-2193), 0);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue((Integer) null, "", linkedList0, (Integer) null, long0, mockDate0, "");
      savedPlayQueue0.setMediaFileIds(linkedList0);
      assertEquals(0L, (long)savedPlayQueue0.getPositionMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(2346);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-426L));
      MockDate mockDate0 = new MockDate(2346, 2346, 2346, 2346, 2346);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "org.airsonic.player.domain.SavedPlayQueue", linkedList0, integer0, long0, mockDate0, "org.airsonic.player.domain.SavedPlayQueue");
      Integer integer1 = savedPlayQueue0.getCurrentMediaFileId();
      assertFalse(linkedList0.contains(integer1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer((-3205));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long(259L);
      MockDate mockDate0 = new MockDate(0L);
      SavedPlayQueue savedPlayQueue0 = new SavedPlayQueue(integer0, "V8nGps;0Y>bA38N+", linkedList0, (Integer) null, long0, mockDate0, "V8nGps;0Y>bA38N+");
      String string0 = savedPlayQueue0.getChangedBy();
      assertEquals("V8nGps;0Y>bA38N+", string0);
  }
}
