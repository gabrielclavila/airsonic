/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:51:50 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.AlbumInfo;
import org.subsonic.restapi.AlbumList;
import org.subsonic.restapi.AlbumList2;
import org.subsonic.restapi.AlbumWithSongsID3;
import org.subsonic.restapi.ArtistInfo;
import org.subsonic.restapi.ArtistInfo2;
import org.subsonic.restapi.ArtistWithAlbumsID3;
import org.subsonic.restapi.ArtistsID3;
import org.subsonic.restapi.Bookmarks;
import org.subsonic.restapi.ChatMessages;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.Directory;
import org.subsonic.restapi.Error;
import org.subsonic.restapi.Genres;
import org.subsonic.restapi.Indexes;
import org.subsonic.restapi.InternetRadioStations;
import org.subsonic.restapi.JukeboxPlaylist;
import org.subsonic.restapi.JukeboxStatus;
import org.subsonic.restapi.License;
import org.subsonic.restapi.Lyrics;
import org.subsonic.restapi.MusicFolders;
import org.subsonic.restapi.NewestPodcasts;
import org.subsonic.restapi.NowPlaying;
import org.subsonic.restapi.PlayQueue;
import org.subsonic.restapi.PlaylistWithSongs;
import org.subsonic.restapi.Playlists;
import org.subsonic.restapi.Podcasts;
import org.subsonic.restapi.Response;
import org.subsonic.restapi.ResponseStatus;
import org.subsonic.restapi.ScanStatus;
import org.subsonic.restapi.SearchResult;
import org.subsonic.restapi.SearchResult2;
import org.subsonic.restapi.SearchResult3;
import org.subsonic.restapi.Shares;
import org.subsonic.restapi.SimilarSongs;
import org.subsonic.restapi.SimilarSongs2;
import org.subsonic.restapi.Songs;
import org.subsonic.restapi.Starred;
import org.subsonic.restapi.Starred2;
import org.subsonic.restapi.TopSongs;
import org.subsonic.restapi.User;
import org.subsonic.restapi.Users;
import org.subsonic.restapi.VideoInfo;
import org.subsonic.restapi.Videos;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Response_ESTest extends Response_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Response response0 = new Response();
      Shares shares0 = new Shares();
      response0.setShares(shares0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Response response0 = new Response();
      PlayQueue playQueue0 = new PlayQueue();
      response0.setPlayQueue(playQueue0);
      assertNull(playQueue0.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Response response0 = new Response();
      Bookmarks bookmarks0 = new Bookmarks();
      response0.setBookmarks(bookmarks0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Response response0 = new Response();
      InternetRadioStations internetRadioStations0 = new InternetRadioStations();
      response0.internetRadioStations = internetRadioStations0;
      response0.setInternetRadioStations((InternetRadioStations) null);
      assertNull(response0.getVersion());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Response response0 = new Response();
      NewestPodcasts newestPodcasts0 = new NewestPodcasts();
      response0.setNewestPodcasts(newestPodcasts0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Response response0 = new Response();
      AlbumList albumList0 = new AlbumList();
      response0.setAlbumList(albumList0);
      assertNull(response0.getVersion());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Response response0 = new Response();
      License license0 = new License();
      response0.setLicense(license0);
      assertFalse(license0.isValid());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Response response0 = new Response();
      JukeboxPlaylist jukeboxPlaylist0 = new JukeboxPlaylist();
      response0.setJukeboxPlaylist(jukeboxPlaylist0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Response response0 = new Response();
      SearchResult2 searchResult2_0 = new SearchResult2();
      response0.setSearchResult2(searchResult2_0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Response response0 = new Response();
      Videos videos0 = new Videos();
      response0.setVideos(videos0);
      assertNull(response0.getVersion());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Response response0 = new Response();
      ArtistsID3 artistsID3_0 = new ArtistsID3();
      response0.setArtists(artistsID3_0);
      assertNull(response0.getVersion());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Response response0 = new Response();
      Indexes indexes0 = new Indexes();
      response0.setIndexes(indexes0);
      assertEquals(0L, indexes0.getLastModified());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Response response0 = new Response();
      MusicFolders musicFolders0 = new MusicFolders();
      response0.setMusicFolders(musicFolders0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Response response0 = new Response();
      Videos videos0 = new Videos();
      response0.videos = videos0;
      Videos videos1 = response0.getVideos();
      assertSame(videos1, videos0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Response response0 = new Response();
      VideoInfo videoInfo0 = new VideoInfo();
      response0.setVideoInfo(videoInfo0);
      VideoInfo videoInfo1 = response0.getVideoInfo();
      assertSame(videoInfo1, videoInfo0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Response response0 = new Response();
      response0.version = "";
      String string0 = response0.getVersion();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Response response0 = new Response();
      Users users0 = new Users();
      response0.users = users0;
      Users users1 = response0.getUsers();
      assertSame(users1, users0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Response response0 = new Response();
      User user0 = new User();
      user0.streamRole = true;
      response0.setUser(user0);
      User user1 = response0.getUser();
      assertFalse(user1.isPodcastRole());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Response response0 = new Response();
      User user0 = new User();
      user0.downloadRole = true;
      response0.user = user0;
      User user1 = response0.getUser();
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Response response0 = new Response();
      User user0 = new User();
      response0.user = user0;
      user0.setAdminRole(true);
      User user1 = response0.getUser();
      assertFalse(user1.isVideoConversionRole());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Response response0 = new Response();
      ResponseStatus responseStatus0 = ResponseStatus.FAILED;
      response0.setStatus(responseStatus0);
      ResponseStatus responseStatus1 = response0.getStatus();
      assertSame(responseStatus1, responseStatus0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Response response0 = new Response();
      Starred2 starred2_0 = new Starred2();
      response0.setStarred2(starred2_0);
      Starred2 starred2_1 = response0.getStarred2();
      assertSame(starred2_1, starred2_0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Response response0 = new Response();
      Songs songs0 = new Songs();
      response0.setSongsByGenre(songs0);
      Songs songs1 = response0.getSongsByGenre();
      assertSame(songs1, songs0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Response response0 = new Response();
      Child child0 = new Child();
      response0.setSong(child0);
      Child child1 = response0.getSong();
      assertNull(child1.getAlbum());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Response response0 = new Response();
      SimilarSongs2 similarSongs2_0 = new SimilarSongs2();
      response0.setSimilarSongs2(similarSongs2_0);
      SimilarSongs2 similarSongs2_1 = response0.getSimilarSongs2();
      assertSame(similarSongs2_1, similarSongs2_0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Response response0 = new Response();
      SimilarSongs similarSongs0 = new SimilarSongs();
      response0.setSimilarSongs(similarSongs0);
      SimilarSongs similarSongs1 = response0.getSimilarSongs();
      assertSame(similarSongs1, similarSongs0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Response response0 = new Response();
      Shares shares0 = new Shares();
      response0.shares = shares0;
      Shares shares1 = response0.getShares();
      assertSame(shares1, shares0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Response response0 = new Response();
      SearchResult3 searchResult3_0 = new SearchResult3();
      response0.setSearchResult3(searchResult3_0);
      SearchResult3 searchResult3_1 = response0.getSearchResult3();
      assertSame(searchResult3_1, searchResult3_0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Response response0 = new Response();
      SearchResult2 searchResult2_0 = new SearchResult2();
      response0.searchResult2 = searchResult2_0;
      SearchResult2 searchResult2_1 = response0.getSearchResult2();
      assertSame(searchResult2_1, searchResult2_0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Response response0 = new Response();
      SearchResult searchResult0 = new SearchResult();
      searchResult0.totalHits = (-1217);
      response0.searchResult = searchResult0;
      SearchResult searchResult1 = response0.getSearchResult();
      assertSame(searchResult1, searchResult0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Response response0 = new Response();
      SearchResult searchResult0 = new SearchResult();
      response0.searchResult = searchResult0;
      SearchResult searchResult1 = response0.getSearchResult();
      assertSame(searchResult1, searchResult0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Response response0 = new Response();
      SearchResult searchResult0 = new SearchResult();
      searchResult0.offset = (-1362);
      response0.searchResult = searchResult0;
      SearchResult searchResult1 = response0.getSearchResult();
      assertEquals((-1362), searchResult1.getOffset());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Response response0 = new Response();
      ScanStatus scanStatus0 = new ScanStatus();
      response0.setScanStatus(scanStatus0);
      ScanStatus scanStatus1 = response0.getScanStatus();
      assertFalse(scanStatus1.isScanning());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Response response0 = new Response();
      Songs songs0 = new Songs();
      response0.setRandomSongs(songs0);
      Songs songs1 = response0.getRandomSongs();
      assertSame(songs1, songs0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Response response0 = new Response();
      Podcasts podcasts0 = new Podcasts();
      response0.setPodcasts(podcasts0);
      Podcasts podcasts1 = response0.getPodcasts();
      assertSame(podcasts1, podcasts0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Response response0 = new Response();
      Playlists playlists0 = new Playlists();
      response0.setPlaylists(playlists0);
      Playlists playlists1 = response0.getPlaylists();
      assertSame(playlists1, playlists0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Response response0 = new Response();
      PlaylistWithSongs playlistWithSongs0 = new PlaylistWithSongs();
      response0.setPlaylist(playlistWithSongs0);
      PlaylistWithSongs playlistWithSongs1 = response0.getPlaylist();
      assertNull(playlistWithSongs1.getComment());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Response response0 = new Response();
      PlayQueue playQueue0 = new PlayQueue();
      response0.playQueue = playQueue0;
      PlayQueue playQueue1 = response0.getPlayQueue();
      assertNull(playQueue1.getChangedBy());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Response response0 = new Response();
      NewestPodcasts newestPodcasts0 = new NewestPodcasts();
      response0.newestPodcasts = newestPodcasts0;
      NewestPodcasts newestPodcasts1 = response0.getNewestPodcasts();
      assertSame(newestPodcasts1, newestPodcasts0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Response response0 = new Response();
      MusicFolders musicFolders0 = new MusicFolders();
      response0.musicFolders = musicFolders0;
      MusicFolders musicFolders1 = response0.getMusicFolders();
      assertSame(musicFolders1, musicFolders0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Response response0 = new Response();
      License license0 = new License();
      response0.license = license0;
      License license1 = response0.getLicense();
      assertFalse(license1.isValid());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Response response0 = new Response();
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.setGain((-2046.061F));
      response0.setJukeboxStatus(jukeboxStatus0);
      JukeboxStatus jukeboxStatus1 = response0.getJukeboxStatus();
      assertEquals((-2046.061F), jukeboxStatus1.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Response response0 = new Response();
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      response0.setJukeboxStatus(jukeboxStatus0);
      JukeboxStatus jukeboxStatus1 = response0.getJukeboxStatus();
      assertEquals(0, jukeboxStatus1.getCurrentIndex());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Response response0 = new Response();
      JukeboxStatus jukeboxStatus0 = new JukeboxStatus();
      jukeboxStatus0.currentIndex = (-840);
      response0.setJukeboxStatus(jukeboxStatus0);
      JukeboxStatus jukeboxStatus1 = response0.getJukeboxStatus();
      assertSame(jukeboxStatus1, jukeboxStatus0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Response response0 = new Response();
      JukeboxPlaylist jukeboxPlaylist0 = new JukeboxPlaylist();
      response0.jukeboxPlaylist = jukeboxPlaylist0;
      JukeboxPlaylist jukeboxPlaylist1 = response0.getJukeboxPlaylist();
      assertEquals(0.0F, jukeboxPlaylist1.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Response response0 = new Response();
      InternetRadioStations internetRadioStations0 = new InternetRadioStations();
      response0.internetRadioStations = internetRadioStations0;
      InternetRadioStations internetRadioStations1 = response0.getInternetRadioStations();
      assertSame(internetRadioStations1, internetRadioStations0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Response response0 = new Response();
      Indexes indexes0 = new Indexes();
      response0.indexes = indexes0;
      Indexes indexes1 = response0.getIndexes();
      assertNull(indexes1.getIgnoredArticles());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Response response0 = new Response();
      Indexes indexes0 = new Indexes();
      indexes0.setLastModified(4009L);
      response0.indexes = indexes0;
      Indexes indexes1 = response0.getIndexes();
      assertNull(indexes1.getIgnoredArticles());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Response response0 = new Response();
      Genres genres0 = new Genres();
      response0.setGenres(genres0);
      Genres genres1 = response0.getGenres();
      assertSame(genres1, genres0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Response response0 = new Response();
      Error error0 = new Error();
      response0.setError(error0);
      Error error1 = response0.getError();
      assertNull(error1.getMessage());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Response response0 = new Response();
      Error error0 = new Error();
      response0.error = error0;
      error0.code = (-2431);
      Error error1 = response0.getError();
      assertSame(error1, error0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Response response0 = new Response();
      Directory directory0 = new Directory();
      response0.setDirectory(directory0);
      Directory directory1 = response0.getDirectory();
      assertSame(directory1, directory0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Response response0 = new Response();
      Bookmarks bookmarks0 = new Bookmarks();
      response0.bookmarks = bookmarks0;
      Bookmarks bookmarks1 = response0.getBookmarks();
      assertSame(bookmarks1, bookmarks0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Response response0 = new Response();
      ArtistsID3 artistsID3_0 = new ArtistsID3();
      response0.artists = artistsID3_0;
      ArtistsID3 artistsID3_1 = response0.getArtists();
      assertNull(artistsID3_1.getIgnoredArticles());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Response response0 = new Response();
      ArtistInfo2 artistInfo2_0 = new ArtistInfo2();
      response0.setArtistInfo2(artistInfo2_0);
      ArtistInfo2 artistInfo2_1 = response0.getArtistInfo2();
      assertNull(artistInfo2_1.getMusicBrainzId());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Response response0 = new Response();
      ArtistInfo artistInfo0 = new ArtistInfo();
      response0.setArtistInfo(artistInfo0);
      ArtistInfo artistInfo1 = response0.getArtistInfo();
      assertNull(artistInfo1.getMediumImageUrl());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Response response0 = new Response();
      ArtistWithAlbumsID3 artistWithAlbumsID3_0 = new ArtistWithAlbumsID3();
      response0.artist = artistWithAlbumsID3_0;
      ArtistWithAlbumsID3 artistWithAlbumsID3_1 = response0.getArtist();
      assertNull(artistWithAlbumsID3_1.getCoverArt());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Response response0 = new Response();
      AlbumList2 albumList2_0 = new AlbumList2();
      response0.setAlbumList2(albumList2_0);
      AlbumList2 albumList2_1 = response0.getAlbumList2();
      assertSame(albumList2_1, albumList2_0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Response response0 = new Response();
      AlbumList albumList0 = new AlbumList();
      response0.albumList = albumList0;
      AlbumList albumList1 = response0.getAlbumList();
      assertSame(albumList1, albumList0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Response response0 = new Response();
      AlbumWithSongsID3 albumWithSongsID3_0 = new AlbumWithSongsID3();
      albumWithSongsID3_0.songCount = 1212;
      response0.setAlbum(albumWithSongsID3_0);
      AlbumWithSongsID3 albumWithSongsID3_1 = response0.getAlbum();
      assertNull(albumWithSongsID3_1.getId());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Response response0 = new Response();
      ArtistWithAlbumsID3 artistWithAlbumsID3_0 = new ArtistWithAlbumsID3();
      response0.setArtist(artistWithAlbumsID3_0);
      assertNull(response0.getStatus());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Response response0 = new Response();
      Genres genres0 = response0.getGenres();
      assertNull(genres0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Response response0 = new Response();
      Error error0 = response0.getError();
      assertNull(error0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Response response0 = new Response();
      response0.getStatus();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Response response0 = new Response();
      Users users0 = new Users();
      response0.setUsers(users0);
      assertNull(response0.getVersion());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Response response0 = new Response();
      JukeboxPlaylist jukeboxPlaylist0 = response0.getJukeboxPlaylist();
      assertNull(jukeboxPlaylist0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Response response0 = new Response();
      PlaylistWithSongs playlistWithSongs0 = response0.getPlaylist();
      assertNull(playlistWithSongs0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Response response0 = new Response();
      User user0 = response0.getUser();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Response response0 = new Response();
      ArtistWithAlbumsID3 artistWithAlbumsID3_0 = response0.getArtist();
      assertNull(artistWithAlbumsID3_0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Response response0 = new Response();
      ChatMessages chatMessages0 = response0.getChatMessages();
      assertNull(chatMessages0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Response response0 = new Response();
      Podcasts podcasts0 = response0.getPodcasts();
      assertNull(podcasts0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Response response0 = new Response();
      Shares shares0 = response0.getShares();
      assertNull(shares0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Response response0 = new Response();
      ArtistsID3 artistsID3_0 = response0.getArtists();
      assertNull(artistsID3_0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Response response0 = new Response();
      AlbumList albumList0 = response0.getAlbumList();
      assertNull(albumList0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Response response0 = new Response();
      Indexes indexes0 = response0.getIndexes();
      assertNull(indexes0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Response response0 = new Response();
      ArtistInfo2 artistInfo2_0 = response0.getArtistInfo2();
      assertNull(artistInfo2_0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Response response0 = new Response();
      Lyrics lyrics0 = new Lyrics();
      response0.setLyrics(lyrics0);
      Lyrics lyrics1 = response0.getLyrics();
      assertNull(lyrics1.getArtist());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Response response0 = new Response();
      JukeboxStatus jukeboxStatus0 = response0.getJukeboxStatus();
      assertNull(jukeboxStatus0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Response response0 = new Response();
      NowPlaying nowPlaying0 = response0.getNowPlaying();
      assertNull(nowPlaying0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Response response0 = new Response();
      NewestPodcasts newestPodcasts0 = response0.getNewestPodcasts();
      assertNull(newestPodcasts0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Response response0 = new Response();
      Playlists playlists0 = response0.getPlaylists();
      assertNull(playlists0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Response response0 = new Response();
      Songs songs0 = response0.getRandomSongs();
      assertNull(songs0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Response response0 = new Response();
      PlayQueue playQueue0 = response0.getPlayQueue();
      assertNull(playQueue0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Response response0 = new Response();
      Bookmarks bookmarks0 = response0.getBookmarks();
      assertNull(bookmarks0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Response response0 = new Response();
      AlbumInfo albumInfo0 = new AlbumInfo();
      response0.setAlbumInfo(albumInfo0);
      AlbumInfo albumInfo1 = response0.getAlbumInfo();
      assertNull(albumInfo1.getLargeImageUrl());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Response response0 = new Response();
      Starred starred0 = new Starred();
      response0.setStarred(starred0);
      Starred starred1 = response0.getStarred();
      assertSame(starred1, starred0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Response response0 = new Response();
      Lyrics lyrics0 = response0.getLyrics();
      assertNull(lyrics0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Response response0 = new Response();
      AlbumList2 albumList2_0 = response0.getAlbumList2();
      assertNull(albumList2_0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Response response0 = new Response();
      Users users0 = response0.getUsers();
      assertNull(users0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Response response0 = new Response();
      AlbumWithSongsID3 albumWithSongsID3_0 = new AlbumWithSongsID3();
      response0.setAlbum(albumWithSongsID3_0);
      AlbumWithSongsID3 albumWithSongsID3_1 = response0.getAlbum();
      assertNull(albumWithSongsID3_1.getArtist());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Response response0 = new Response();
      SearchResult2 searchResult2_0 = response0.getSearchResult2();
      assertNull(searchResult2_0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Response response0 = new Response();
      TopSongs topSongs0 = new TopSongs();
      response0.setTopSongs(topSongs0);
      TopSongs topSongs1 = response0.getTopSongs();
      assertSame(topSongs1, topSongs0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Response response0 = new Response();
      String string0 = response0.getVersion();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Response response0 = new Response();
      Directory directory0 = response0.getDirectory();
      assertNull(directory0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Response response0 = new Response();
      Videos videos0 = response0.getVideos();
      assertNull(videos0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Response response0 = new Response();
      ScanStatus scanStatus0 = response0.getScanStatus();
      assertNull(scanStatus0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Response response0 = new Response();
      VideoInfo videoInfo0 = response0.getVideoInfo();
      assertNull(videoInfo0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Response response0 = new Response();
      SearchResult searchResult0 = response0.getSearchResult();
      assertNull(searchResult0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Response response0 = new Response();
      SimilarSongs2 similarSongs2_0 = response0.getSimilarSongs2();
      assertNull(similarSongs2_0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Response response0 = new Response();
      TopSongs topSongs0 = response0.getTopSongs();
      assertNull(topSongs0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Response response0 = new Response();
      InternetRadioStations internetRadioStations0 = response0.getInternetRadioStations();
      assertNull(internetRadioStations0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Response response0 = new Response();
      SearchResult3 searchResult3_0 = response0.getSearchResult3();
      assertNull(searchResult3_0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Response response0 = new Response();
      SearchResult searchResult0 = new SearchResult();
      response0.setSearchResult(searchResult0);
      assertEquals(0, searchResult0.getOffset());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Response response0 = new Response();
      License license0 = response0.getLicense();
      assertNull(license0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Response response0 = new Response();
      MusicFolders musicFolders0 = response0.getMusicFolders();
      assertNull(musicFolders0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Response response0 = new Response();
      ChatMessages chatMessages0 = new ChatMessages();
      response0.setChatMessages(chatMessages0);
      ChatMessages chatMessages1 = response0.getChatMessages();
      assertSame(chatMessages1, chatMessages0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Response response0 = new Response();
      Child child0 = response0.getSong();
      assertNull(child0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Response response0 = new Response();
      SimilarSongs similarSongs0 = response0.getSimilarSongs();
      assertNull(similarSongs0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Response response0 = new Response();
      response0.setVersion("N2Wo e");
      String string0 = response0.getVersion();
      assertEquals("N2Wo e", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Response response0 = new Response();
      Starred starred0 = response0.getStarred();
      assertNull(starred0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Response response0 = new Response();
      AlbumInfo albumInfo0 = response0.getAlbumInfo();
      assertNull(albumInfo0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Response response0 = new Response();
      NowPlaying nowPlaying0 = new NowPlaying();
      response0.setNowPlaying(nowPlaying0);
      NowPlaying nowPlaying1 = response0.getNowPlaying();
      assertSame(nowPlaying1, nowPlaying0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Response response0 = new Response();
      Songs songs0 = response0.getSongsByGenre();
      assertNull(songs0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Response response0 = new Response();
      ArtistInfo artistInfo0 = response0.getArtistInfo();
      assertNull(artistInfo0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Response response0 = new Response();
      Starred2 starred2_0 = response0.getStarred2();
      assertNull(starred2_0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Response response0 = new Response();
      AlbumWithSongsID3 albumWithSongsID3_0 = response0.getAlbum();
      assertNull(albumWithSongsID3_0);
  }
}
