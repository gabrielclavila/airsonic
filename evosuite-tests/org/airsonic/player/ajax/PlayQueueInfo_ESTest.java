/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:27:37 GMT 2024
 */

package org.airsonic.player.ajax;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.ajax.PlayQueueInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayQueueInfo_ESTest extends PlayQueueInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-365));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-365), integer0, "9`Yh-&}!Evg&!ViQ", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "", integer0, "9`Yh-&}!Evg&!ViQ", integer0, "", "", "", "org.airsonic.player.ajax.PlayQueueInfo$Entry", true, "", "", "", "9`Yh-&}!Evg&!ViQ", "org.airsonic.player.ajax.PlayQueueInfo$Entry");
      assertEquals("", playQueueInfo_Entry0.getAlbumUrl());
      assertEquals("", playQueueInfo_Entry0.getDurationAsString());
      assertEquals((-365), playQueueInfo_Entry0.getId());
      assertEquals("", playQueueInfo_Entry0.getAlbum());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getArtist());
      assertEquals("", playQueueInfo_Entry0.getGenre());
      assertEquals("", playQueueInfo_Entry0.getRemoteStreamUrl());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getFileSize());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getRemoteCoverArtUrl());
      assertEquals("", playQueueInfo_Entry0.getFormat());
      assertEquals("9`Yh-&}!Evg&!ViQ", playQueueInfo_Entry0.getBitRate());
      assertTrue(playQueueInfo_Entry0.isStarred());
      assertEquals("", playQueueInfo_Entry0.getContentType());
      assertEquals("9`Yh-&}!Evg&!ViQ", playQueueInfo_Entry0.getCoverArtUrl());
      assertEquals("9`Yh-&}!Evg&!ViQ", playQueueInfo_Entry0.getTitle());
      assertEquals("", playQueueInfo_Entry0.getStreamUrl());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, true, false, false, false, 0);
      PlayQueueInfo playQueueInfo1 = playQueueInfo0.setStartPlayerAt(0);
      playQueueInfo1.setStartPlayerAtPosition((-1L));
      assertEquals((-1L), playQueueInfo1.getStartPlayerAtPosition());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, false, false, 0.0F);
      PlayQueueInfo playQueueInfo1 = playQueueInfo0.setStartPlayerAt(4063);
      playQueueInfo1.setStartPlayerAtPosition(0);
      assertEquals(4063, playQueueInfo0.getStartPlayerAt());
      assertFalse(playQueueInfo0.isInternetRadioEnabled());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, 0.0F);
      PlayQueueInfo playQueueInfo1 = playQueueInfo0.setStartPlayerAtPosition(1086L);
      playQueueInfo1.setStartPlayerAt(1975);
      assertEquals(1086L, playQueueInfo0.getStartPlayerAtPosition());
      assertTrue(playQueueInfo0.isRepeatEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, false, false, true, true, 0.0F);
      playQueueInfo0.setStartPlayerAtPosition((-1L));
      playQueueInfo0.setStartPlayerAt(294);
      assertEquals((-1L), playQueueInfo0.getStartPlayerAtPosition());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, false, true, 1.0F);
      playQueueInfo0.setStartPlayerAt((-2046));
      assertEquals((-2046), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, 1442.6893F);
      boolean boolean0 = playQueueInfo0.isStopEnabled();
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertEquals(1442.6893F, playQueueInfo0.getGain(), 0.01F);
      assertTrue(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, false, true, 0);
      boolean boolean0 = playQueueInfo0.isShuffleRadioEnabled();
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertTrue(playQueueInfo0.isSendM3U());
      assertEquals(0.0F, playQueueInfo0.getGain(), 0.01F);
      assertFalse(boolean0);
      assertFalse(playQueueInfo0.isInternetRadioEnabled());
      assertFalse(playQueueInfo0.isStopEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, true, false, false, false, 0.0F);
      boolean boolean0 = playQueueInfo0.isSendM3U();
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(boolean0);
      assertFalse(playQueueInfo0.isInternetRadioEnabled());
      assertFalse(playQueueInfo0.isStopEnabled());
      assertEquals(0.0F, playQueueInfo0.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, true, true, false, 0);
      boolean boolean0 = playQueueInfo0.isRepeatEnabled();
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isStopEnabled());
      assertEquals(0.0F, playQueueInfo0.getGain(), 0.01F);
      assertFalse(boolean0);
      assertFalse(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, false, false, false, true, 3682.1F);
      boolean boolean0 = playQueueInfo0.isInternetRadioEnabled();
      assertTrue(playQueueInfo0.isStopEnabled());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isSendM3U());
      assertEquals(3682.1F, playQueueInfo0.getGain(), 0.01F);
      assertFalse(boolean0);
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertFalse(playQueueInfo0.isRepeatEnabled());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, false, true, 1.0F);
      playQueueInfo0.setStartPlayerAtPosition(1L);
      long long0 = playQueueInfo0.getStartPlayerAtPosition();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, true, false, true, false, (-1883.3541F));
      PlayQueueInfo playQueueInfo1 = playQueueInfo0.setStartPlayerAtPosition((-1L));
      long long0 = playQueueInfo1.getStartPlayerAtPosition();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, true, false, false, false, 0);
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      
      playQueueInfo0.setStartPlayerAt(0);
      int int0 = playQueueInfo0.getStartPlayerAt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, false, false, true, true, 0.0F);
      PlayQueueInfo playQueueInfo1 = playQueueInfo0.setStartPlayerAt(294);
      int int0 = playQueueInfo1.getStartPlayerAt();
      assertEquals(294, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, false, false, true, true, 0.0F);
      float float0 = playQueueInfo0.getGain();
      assertTrue(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isSendM3U());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isRepeatEnabled());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, 1.0F);
      float float0 = playQueueInfo0.getGain();
      assertTrue(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertEquals(1.0F, float0, 0.01F);
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isStopEnabled());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo((List<PlayQueueInfo.Entry>) null, false, true, true, true, false, 0.0F);
      playQueueInfo0.getEntries();
      assertFalse(playQueueInfo0.isSendM3U());
      assertFalse(playQueueInfo0.isStopEnabled());
      assertEquals(0.0F, playQueueInfo0.getGain(), 0.01F);
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(25);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(25, (Integer) null, "", "", "", "", integer0, "", (Integer) null, "", "", "", "", false, "", "", "", "", "");
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      linkedList0.add(playQueueInfo_Entry0);
      assertEquals(25, playQueueInfo_Entry0.getId());
      assertFalse(playQueueInfo_Entry0.isStarred());
      
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, true, false, 25);
      playQueueInfo0.getEntries();
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertFalse(playQueueInfo0.isSendM3U());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isStopEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo((List<PlayQueueInfo.Entry>) null, false, true, true, true, false, 0.0F);
      // Undeclared exception!
      try { 
        playQueueInfo0.getDurationAsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.ajax.PlayQueueInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-2618));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "", "", (Integer) null, "", integer1, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "", "", false, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "gj8nw6?/$U:uhl", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "gj8nw6?/$U:uhl");
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      linkedList0.add(playQueueInfo_Entry0);
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, false, false, (-2618));
      // Undeclared exception!
      try { 
        playQueueInfo0.getDurationAsString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // seconds must be >= 0
         //
         verifyException("org.airsonic.player.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, (Integer) null, "", ",5>", "", "", integer0, "", (Integer) null, "", "", "", "", false, "nM%?<G0gK?Lpp/Rmp<", "k*%v(j[g*VP", "", "", "");
      playQueueInfo_Entry0.getDuration();
      assertEquals("nM%?<G0gK?Lpp/Rmp<", playQueueInfo_Entry0.getAlbumUrl());
      assertEquals("", playQueueInfo_Entry0.getFormat());
      assertEquals("", playQueueInfo_Entry0.getAlbum());
      assertEquals("k*%v(j[g*VP", playQueueInfo_Entry0.getStreamUrl());
      assertEquals("", playQueueInfo_Entry0.getDurationAsString());
      assertEquals("", playQueueInfo_Entry0.getRemoteCoverArtUrl());
      assertEquals("", playQueueInfo_Entry0.getCoverArtUrl());
      assertEquals(",5>", playQueueInfo_Entry0.getArtist());
      assertEquals("", playQueueInfo_Entry0.getFileSize());
      assertEquals("", playQueueInfo_Entry0.getBitRate());
      assertEquals("", playQueueInfo_Entry0.getRemoteStreamUrl());
      assertFalse(playQueueInfo_Entry0.isStarred());
      assertEquals("", playQueueInfo_Entry0.getTitle());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(25);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(25, (Integer) null, "", "", "", "", integer0, "", (Integer) null, "", "", "", "", false, "", "", "", "", "");
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      linkedList0.add(playQueueInfo_Entry0);
      assertEquals(25, playQueueInfo_Entry0.getId());
      assertFalse(playQueueInfo_Entry0.isStarred());
      
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, true, false, 25);
      playQueueInfo0.getDurationAsString();
      assertFalse(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isRepeatEnabled());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, true, false, 25);
      boolean boolean0 = playQueueInfo0.isStopEnabled();
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertEquals(25.0F, playQueueInfo0.getGain(), 0.01F);
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertFalse(boolean0);
      assertFalse(playQueueInfo0.isSendM3U());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, (-5));
      playQueueInfo0.setStartPlayerAt((-5));
      assertEquals((-5), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, true, false, 25);
      int int0 = playQueueInfo0.getStartPlayerAt();
      assertFalse(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertFalse(playQueueInfo0.isSendM3U());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertEquals((-1), int0);
      assertEquals(25.0F, playQueueInfo0.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, (-5));
      float float0 = playQueueInfo0.getGain();
      assertTrue(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertEquals((-5.0F), float0, 0.01F);
      assertTrue(playQueueInfo0.isSendM3U());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, false, true, false, true, 0);
      playQueueInfo0.getStartPlayerAtPosition();
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertFalse(playQueueInfo0.isInternetRadioEnabled());
      assertEquals(0.0F, playQueueInfo0.getGain(), 0.01F);
      assertTrue(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isStopEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, (-16.641035F));
      boolean boolean0 = playQueueInfo0.isShuffleRadioEnabled();
      assertTrue(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(boolean0);
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals((-16.641035F), playQueueInfo0.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo((List<PlayQueueInfo.Entry>) null, true, true, true, true, true, (-3011L));
      boolean boolean0 = playQueueInfo0.isInternetRadioEnabled();
      assertTrue(playQueueInfo0.isSendM3U());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(boolean0);
      assertEquals((-3011.0F), playQueueInfo0.getGain(), 0.01F);
      assertTrue(playQueueInfo0.isStopEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, (-5));
      boolean boolean0 = playQueueInfo0.isSendM3U();
      assertEquals((-5.0F), playQueueInfo0.getGain(), 0.01F);
      assertTrue(boolean0);
      assertTrue(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertTrue(playQueueInfo0.isRepeatEnabled());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, false, false, false, true, false, 25);
      playQueueInfo0.getEntries();
      assertFalse(playQueueInfo0.isRepeatEnabled());
      assertFalse(playQueueInfo0.isShuffleRadioEnabled());
      assertFalse(playQueueInfo0.isSendM3U());
      assertEquals(25.0F, playQueueInfo0.getGain(), 0.01F);
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertFalse(playQueueInfo0.isStopEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<PlayQueueInfo.Entry> linkedList0 = new LinkedList<PlayQueueInfo.Entry>();
      PlayQueueInfo playQueueInfo0 = new PlayQueueInfo(linkedList0, true, true, true, true, true, (-5));
      boolean boolean0 = playQueueInfo0.isRepeatEnabled();
      assertTrue(boolean0);
      assertTrue(playQueueInfo0.isStopEnabled());
      assertTrue(playQueueInfo0.isInternetRadioEnabled());
      assertEquals((-1), playQueueInfo0.getStartPlayerAt());
      assertTrue(playQueueInfo0.isShuffleRadioEnabled());
      assertTrue(playQueueInfo0.isSendM3U());
      assertEquals((-5.0F), playQueueInfo0.getGain(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = new Integer(25);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(25, (Integer) null, "", "", "", "", integer0, "", (Integer) null, "", "", "", "", false, "", "", "", "", "");
      playQueueInfo_Entry0.getTitle();
      assertEquals(25, playQueueInfo_Entry0.getId());
      assertFalse(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, (Integer) null, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", false, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=");
      playQueueInfo_Entry0.getRemoteCoverArtUrl();
      assertEquals(0, playQueueInfo_Entry0.getId());
      assertFalse(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-5), integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", integer0, "z$>MGlb.i", integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", true, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i");
      playQueueInfo_Entry0.getFileSize();
      assertEquals((-5), playQueueInfo_Entry0.getId());
      assertTrue(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = new Integer((-1378));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-1378), integer0, "0:00", "0:00", "0:00", "0:00", integer0, "0:00", integer0, "0:00", "0:00", "0:00", "0:00", true, "0:00", "0:00", "0:00", "0:00", "0:00");
      playQueueInfo_Entry0.getFormat();
      assertTrue(playQueueInfo_Entry0.isStarred());
      assertEquals((-1378), playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, integer0, "TT", "TT", "TT", "TT", integer0, "TT", integer0, "TT", "TT", "TT", "TT", true, "TT", "TT", "0", "TT", "TT");
      int int0 = playQueueInfo_Entry0.getId();
      assertEquals("TT", playQueueInfo_Entry0.getArtist());
      assertTrue(playQueueInfo_Entry0.isStarred());
      assertEquals("TT", playQueueInfo_Entry0.getContentType());
      assertEquals("TT", playQueueInfo_Entry0.getStreamUrl());
      assertEquals("TT", playQueueInfo_Entry0.getFileSize());
      assertEquals("TT", playQueueInfo_Entry0.getTitle());
      assertEquals(0, int0);
      assertEquals("0", playQueueInfo_Entry0.getRemoteStreamUrl());
      assertEquals("TT", playQueueInfo_Entry0.getAlbum());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, integer0, "TT", "TT", "TT", "TT", integer0, "TT", integer0, "TT", "TT", "TT", "TT", true, "TT", "TT", "0", "TT", "TT");
      playQueueInfo_Entry0.getBitRate();
      assertEquals("TT", playQueueInfo_Entry0.getRemoteCoverArtUrl());
      assertEquals("TT", playQueueInfo_Entry0.getTitle());
      assertEquals("TT", playQueueInfo_Entry0.getArtist());
      assertEquals("TT", playQueueInfo_Entry0.getAlbumUrl());
      assertEquals("TT", playQueueInfo_Entry0.getFormat());
      assertEquals("TT", playQueueInfo_Entry0.getContentType());
      assertEquals("TT", playQueueInfo_Entry0.getFileSize());
      assertEquals("TT", playQueueInfo_Entry0.getStreamUrl());
      assertEquals("TT", playQueueInfo_Entry0.getDurationAsString());
      assertEquals("TT", playQueueInfo_Entry0.getCoverArtUrl());
      assertEquals("0", playQueueInfo_Entry0.getRemoteStreamUrl());
      assertEquals(0, playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(25);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(25, (Integer) null, "", "", "", "", integer0, "", (Integer) null, "", "", "", "", false, "", "", "", "", "");
      playQueueInfo_Entry0.getStreamUrl();
      assertFalse(playQueueInfo_Entry0.isStarred());
      assertEquals(25, playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, (Integer) null, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", false, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=");
      playQueueInfo_Entry0.getAlbum();
      assertEquals(0, playQueueInfo_Entry0.getId());
      assertFalse(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-5), integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", integer0, "z$>MGlb.i", integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", true, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i");
      playQueueInfo_Entry0.getCoverArtUrl();
      assertEquals((-5), playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer(54);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(54, integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", false, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "org.airsonic.player.ajax.PlayQueueInfo$Entry");
      playQueueInfo_Entry0.getTrackNumber();
      assertFalse(playQueueInfo_Entry0.isStarred());
      assertEquals(54, playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-5), integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", integer0, "z$>MGlb.i", integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", true, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i");
      boolean boolean0 = playQueueInfo_Entry0.isStarred();
      assertEquals((-5), playQueueInfo_Entry0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, (Integer) null, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", false, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=");
      playQueueInfo_Entry0.getGenre();
      assertEquals(0, playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-5), integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", integer0, "z$>MGlb.i", integer0, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", true, "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i", "z$>MGlb.i");
      playQueueInfo_Entry0.getContentType();
      assertEquals((-5), playQueueInfo_Entry0.getId());
      assertTrue(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Integer integer0 = new Integer(25);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(25, (Integer) null, "", "", "", "", integer0, "", (Integer) null, "", "", "", "", false, "", "", "", "", "");
      playQueueInfo_Entry0.getAlbumUrl();
      assertEquals(25, playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Integer integer0 = new Integer(10);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(10, integer0, "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", integer0, "ZC AHou acB", integer0, "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", false, "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", "ZC AHou acB", "ZC AHou acB");
      playQueueInfo_Entry0.getYear();
      assertFalse(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-2513));
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry((-2513), integer0, "", "", "", "", integer0, "", integer0, "", "", "", "", true, "", "", "", "", "");
      playQueueInfo_Entry0.getRemoteStreamUrl();
      assertEquals((-2513), playQueueInfo_Entry0.getId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, (Integer) null, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", integer0, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", false, "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=", "a-li(n^/^`68=");
      playQueueInfo_Entry0.getDurationAsString();
      assertFalse(playQueueInfo_Entry0.isStarred());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Integer integer0 = new Integer(0);
      PlayQueueInfo.Entry playQueueInfo_Entry0 = new PlayQueueInfo.Entry(0, integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "", "", (Integer) null, "", integer0, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "", "", false, "org.airsonic.player.ajax.PlayQueueInfo$Entry", "gj8nw6?/$U:uhl", "org.airsonic.player.ajax.PlayQueueInfo$Entry", "", "gj8nw6?/$U:uhl");
      String string0 = playQueueInfo_Entry0.getArtist();
      assertEquals("gj8nw6?/$U:uhl", playQueueInfo_Entry0.getRemoteCoverArtUrl());
      assertEquals("", playQueueInfo_Entry0.getBitRate());
      assertEquals("", playQueueInfo_Entry0.getGenre());
      assertEquals("", playQueueInfo_Entry0.getFileSize());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getTitle());
      assertEquals("", string0);
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getRemoteStreamUrl());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getDurationAsString());
      assertEquals("", playQueueInfo_Entry0.getAlbum());
      assertEquals("", playQueueInfo_Entry0.getFormat());
      assertEquals("", playQueueInfo_Entry0.getContentType());
      assertEquals("gj8nw6?/$U:uhl", playQueueInfo_Entry0.getStreamUrl());
      assertFalse(playQueueInfo_Entry0.isStarred());
      assertEquals("org.airsonic.player.ajax.PlayQueueInfo$Entry", playQueueInfo_Entry0.getAlbumUrl());
      assertEquals("", playQueueInfo_Entry0.getCoverArtUrl());
      assertEquals(0, playQueueInfo_Entry0.getId());
  }
}
