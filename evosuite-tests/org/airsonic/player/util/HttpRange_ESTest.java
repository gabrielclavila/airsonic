/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:33:40 GMT 2024
 */

package org.airsonic.player.util;

import org.junit.Test;
import static org.junit.Assert.*;
import org.airsonic.player.util.HttpRange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpRange_ESTest extends HttpRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      boolean boolean0 = httpRange0.contains((-2084L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      long long1 = httpRange0.size();
      assertEquals(2085L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Long long0 = new Long((-12L));
      HttpRange httpRange0 = new HttpRange((-11L), long0);
      long long1 = httpRange0.size();
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange((-1075L), (Long) null);
      httpRange0.getLastBytePos();
      assertEquals((-1075L), (long)httpRange0.getFirstBytePos());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(20L);
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      httpRange0.getLastBytePos();
      assertEquals(2105L, httpRange0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = Long.getLong("ljnQ~ng#sCy[+m.", (-176L));
      HttpRange httpRange0 = new HttpRange((-176L), long0);
      httpRange0.getLastBytePos();
      assertEquals(1L, httpRange0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long((-2084L));
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      httpRange0.getLastBytePos();
      assertEquals((-2084L), (long)httpRange0.getFirstBytePos());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long long0 = new Long(238L);
      HttpRange httpRange0 = new HttpRange(238L, long0);
      Long long1 = httpRange0.getFirstBytePos();
      assertEquals(238L, (long)long1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      Long long1 = httpRange0.getFirstBytePos();
      assertTrue(long1.equals((Object)long0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Long long0 = new Long((-2712L));
      HttpRange httpRange0 = new HttpRange((-2712L), long0);
      Long long1 = httpRange0.getFirstBytePos();
      assertEquals((-2712L), (long)long1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Long long0 = new Long((-2084L));
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      String string0 = httpRange0.toString();
      assertEquals("-2084--2084", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange((-6L), (Long) null);
      String string0 = httpRange0.toString();
      assertEquals("-6-", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Long long0 = new Long((-2135L));
      HttpRange httpRange0 = new HttpRange((-2135L), long0);
      boolean boolean0 = httpRange0.contains((-31L));
      assertFalse(boolean0);
      assertEquals((-2135L), (long)httpRange0.getFirstBytePos());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange((-6L), (Long) null);
      boolean boolean0 = httpRange0.contains((-6L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange((-6L), (Long) null);
      boolean boolean0 = httpRange0.contains((-561L));
      assertEquals((-6L), (long)httpRange0.getFirstBytePos());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Long long0 = new Long((-2084L));
      HttpRange httpRange0 = new HttpRange((-2084L), long0);
      boolean boolean0 = httpRange0.contains((-2084L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange(1419L, (Long) null);
      assertFalse(httpRange0.isClosed());
      
      long long0 = httpRange0.size();
      assertEquals((-1L), long0);
      assertEquals(1419L, (long)httpRange0.getFirstBytePos());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HttpRange httpRange0 = new HttpRange((-6L), (Long) null);
      boolean boolean0 = httpRange0.isClosed();
      assertFalse(boolean0);
      assertEquals((-6L), (long)httpRange0.getFirstBytePos());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      boolean boolean0 = httpRange0.isClosed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HttpRange httpRange0 = HttpRange.valueOf("}ytes=0-");
      assertNull(httpRange0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HttpRange httpRange0 = HttpRange.valueOf((String) null);
      assertNull(httpRange0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Long long0 = new Long(0L);
      HttpRange httpRange0 = new HttpRange(0L, long0);
      Long long1 = httpRange0.getLastBytePos();
      assertEquals(0L, (long)long1);
  }
}
