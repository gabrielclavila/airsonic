/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:14:58 GMT 2024
 */

package org.airsonic.player.command;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Stack;
import org.airsonic.player.command.EnumHolder;
import org.airsonic.player.command.PlayerSettingsCommand;
import org.airsonic.player.domain.Player;
import org.airsonic.player.domain.PlayerTechnology;
import org.airsonic.player.domain.TranscodeScheme;
import org.airsonic.player.domain.Transcoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlayerSettingsCommand_ESTest extends PlayerSettingsCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTranscodingSupported(true);
      boolean boolean0 = playerSettingsCommand0.isTranscodingSupported();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setDynamicIp(true);
      boolean boolean0 = playerSettingsCommand0.isDynamicIp();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setType("org.airsonic.player.command.PlayerSettingsCommand$TranscodingHolder");
      String string0 = playerSettingsCommand0.getType();
      assertEquals("org.airsonic.player.command.PlayerSettingsCommand$TranscodingHolder", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setType("");
      String string0 = playerSettingsCommand0.getType();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTranscodeSchemeName("W*]rs-S@$");
      String string0 = playerSettingsCommand0.getTranscodeSchemeName();
      assertEquals("W*]rs-S@$", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTranscodeSchemeName("");
      String string0 = playerSettingsCommand0.getTranscodeSchemeName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      TranscodeScheme[] transcodeSchemeArray0 = new TranscodeScheme[7];
      TranscodeScheme transcodeScheme0 = TranscodeScheme.MAX_256;
      transcodeSchemeArray0[0] = transcodeScheme0;
      transcodeSchemeArray0[1] = transcodeSchemeArray0[0];
      transcodeSchemeArray0[2] = transcodeSchemeArray0[0];
      transcodeSchemeArray0[3] = transcodeSchemeArray0[1];
      transcodeSchemeArray0[4] = transcodeSchemeArray0[1];
      transcodeSchemeArray0[5] = transcodeScheme0;
      transcodeSchemeArray0[6] = transcodeSchemeArray0[3];
      playerSettingsCommand0.setTranscodeSchemes(transcodeSchemeArray0);
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTranscodeSchemeHolders();
      assertEquals(7, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      TranscodeScheme[] transcodeSchemeArray0 = new TranscodeScheme[0];
      playerSettingsCommand0.setTranscodeSchemes(transcodeSchemeArray0);
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTranscodeSchemeHolders();
      assertEquals(0, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTranscodeDirectory("/kc@X~x)E&]Sq");
      String string0 = playerSettingsCommand0.getTranscodeDirectory();
      assertEquals("/kc@X~x)E&]Sq", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTechnologyName("[0,R");
      String string0 = playerSettingsCommand0.getTechnologyName();
      assertEquals("[0,R", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTechnologyName("");
      String string0 = playerSettingsCommand0.getTechnologyName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      PlayerTechnology[] playerTechnologyArray0 = new PlayerTechnology[3];
      PlayerTechnology playerTechnology0 = PlayerTechnology.JAVA_JUKEBOX;
      playerTechnologyArray0[0] = playerTechnology0;
      playerTechnologyArray0[1] = playerTechnologyArray0[0];
      playerTechnologyArray0[2] = playerTechnologyArray0[0];
      playerSettingsCommand0.setTechnologies(playerTechnologyArray0);
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTechnologyHolders();
      assertEquals(3, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      PlayerTechnology[] playerTechnologyArray0 = new PlayerTechnology[0];
      playerSettingsCommand0.setTechnologies(playerTechnologyArray0);
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTechnologyHolders();
      assertEquals(0, enumHolderArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Player[] playerArray0 = new Player[7];
      playerSettingsCommand0.setPlayers(playerArray0);
      Player[] playerArray1 = playerSettingsCommand0.getPlayers();
      assertEquals(7, playerArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Player[] playerArray0 = new Player[0];
      playerSettingsCommand0.setPlayers(playerArray0);
      Player[] playerArray1 = playerSettingsCommand0.getPlayers();
      assertEquals(0, playerArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Integer integer0 = new Integer(0);
      playerSettingsCommand0.setPlayerId(integer0);
      Integer integer1 = playerSettingsCommand0.getPlayerId();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Integer integer0 = new Integer((-941));
      playerSettingsCommand0.setPlayerId(integer0);
      Integer integer1 = playerSettingsCommand0.getPlayerId();
      assertEquals((-941), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Integer integer0 = new Integer(4232);
      playerSettingsCommand0.setPlayerId(integer0);
      Integer integer1 = playerSettingsCommand0.getPlayerId();
      assertEquals(4232, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setName("org.airsonic.player.command.PlayerSettingsCommand$TranscodingHolder");
      String string0 = playerSettingsCommand0.getName();
      assertEquals("org.airsonic.player.command.PlayerSettingsCommand$TranscodingHolder", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setName("");
      String string0 = playerSettingsCommand0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String[] stringArray0 = new String[8];
      playerSettingsCommand0.setJavaJukeboxMixers(stringArray0);
      String[] stringArray1 = playerSettingsCommand0.getJavaJukeboxMixers();
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String[] stringArray0 = new String[0];
      playerSettingsCommand0.setJavaJukeboxMixers(stringArray0);
      String[] stringArray1 = playerSettingsCommand0.getJavaJukeboxMixers();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setJavaJukeboxMixer("org.airsonic.player.domain.RandomSearchCriteria");
      String string0 = playerSettingsCommand0.getJavaJukeboxMixer();
      assertEquals("org.airsonic.player.domain.RandomSearchCriteria", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setJavaJukeboxMixer("");
      String string0 = playerSettingsCommand0.getJavaJukeboxMixer();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setDescription("org.airsonic.player.command.PlayerSettingsCommand");
      String string0 = playerSettingsCommand0.getDescription();
      assertEquals("org.airsonic.player.command.PlayerSettingsCommand", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setDescription("");
      String string0 = playerSettingsCommand0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      ArrayList<Transcoding> arrayList0 = new ArrayList<Transcoding>(3227);
      playerSettingsCommand0.setAllTranscodings(arrayList0);
      List<Transcoding> list0 = playerSettingsCommand0.getAllTranscodings();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Stack<Transcoding> stack0 = new Stack<Transcoding>();
      stack0.add((Transcoding) null);
      playerSettingsCommand0.setAllTranscodings(stack0);
      List<Transcoding> list0 = playerSettingsCommand0.getAllTranscodings();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      int[] intArray0 = new int[1];
      playerSettingsCommand0.setActiveTranscodingIds(intArray0);
      int[] intArray1 = playerSettingsCommand0.getActiveTranscodingIds();
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      int[] intArray0 = new int[0];
      playerSettingsCommand0.setActiveTranscodingIds(intArray0);
      int[] intArray1 = playerSettingsCommand0.getActiveTranscodingIds();
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      // Undeclared exception!
      try { 
        playerSettingsCommand0.setTranscodeSchemes((TranscodeScheme[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.command.PlayerSettingsCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      // Undeclared exception!
      try { 
        playerSettingsCommand0.setTechnologies((PlayerTechnology[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.airsonic.player.command.PlayerSettingsCommand", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlayerSettingsCommand.TranscodingHolder playerSettingsCommand_TranscodingHolder0 = new PlayerSettingsCommand.TranscodingHolder((Transcoding) null, false);
      playerSettingsCommand_TranscodingHolder0.getTranscoding();
      assertFalse(playerSettingsCommand_TranscodingHolder0.isActive());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PlayerSettingsCommand.TranscodingHolder playerSettingsCommand_TranscodingHolder0 = new PlayerSettingsCommand.TranscodingHolder((Transcoding) null, false);
      boolean boolean0 = playerSettingsCommand_TranscodingHolder0.isActive();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getTechnologyName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTranscodeSchemeHolders();
      assertNull(enumHolderArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      boolean boolean0 = playerSettingsCommand0.isM3uBomEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      MockDate mockDate0 = new MockDate(1L);
      playerSettingsCommand0.setLastSeen(mockDate0);
      Date date0 = playerSettingsCommand0.getLastSeen();
      assertSame(date0, mockDate0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      EnumHolder[] enumHolderArray0 = playerSettingsCommand0.getTechnologyHolders();
      assertNull(enumHolderArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setAutoControlEnabled(true);
      boolean boolean0 = playerSettingsCommand0.isAutoControlEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      boolean boolean0 = playerSettingsCommand0.isAutoControlEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      boolean boolean0 = playerSettingsCommand0.isTranscodingSupported();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      List<Transcoding> list0 = playerSettingsCommand0.getAllTranscodings();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getTranscodeSchemeName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Date date0 = playerSettingsCommand0.getLastSeen();
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      boolean boolean0 = playerSettingsCommand0.isAdmin();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String[] stringArray0 = playerSettingsCommand0.getJavaJukeboxMixers();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Integer integer0 = playerSettingsCommand0.getPlayerId();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      int[] intArray0 = playerSettingsCommand0.getActiveTranscodingIds();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setAdmin(true);
      boolean boolean0 = playerSettingsCommand0.isAdmin();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setReloadNeeded(true);
      assertNull(playerSettingsCommand0.getTranscodeSchemeName());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      Player[] playerArray0 = playerSettingsCommand0.getPlayers();
      assertNull(playerArray0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getTranscodeDirectory();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getJavaJukeboxMixer();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setM3uBomEnabled(true);
      boolean boolean0 = playerSettingsCommand0.isM3uBomEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      playerSettingsCommand0.setTranscodeDirectory("");
      String string0 = playerSettingsCommand0.getTranscodeDirectory();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      boolean boolean0 = playerSettingsCommand0.isDynamicIp();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PlayerSettingsCommand playerSettingsCommand0 = new PlayerSettingsCommand();
      String string0 = playerSettingsCommand0.getType();
      assertNull(string0);
  }
}
