/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 15:27:35 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import javax.xml.datatype.XMLGregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.Share;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Share_ESTest extends Share_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Share share0 = new Share();
      share0.setVisitCount(1263);
      int int0 = share0.getVisitCount();
      assertEquals(1263, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Share share0 = new Share();
      share0.setVisitCount((-2151));
      int int0 = share0.getVisitCount();
      assertEquals((-2151), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Share share0 = new Share();
      share0.setUsername("$sWra]k2I,Vk`uA");
      String string0 = share0.getUsername();
      assertEquals("$sWra]k2I,Vk`uA", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Share share0 = new Share();
      share0.setUsername("");
      String string0 = share0.getUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Share share0 = new Share();
      share0.setUrl(">Y:7~!{*!.aY");
      String string0 = share0.getUrl();
      assertEquals(">Y:7~!{*!.aY", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Share share0 = new Share();
      share0.setUrl("");
      String string0 = share0.getUrl();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Share share0 = new Share();
      share0.id = "bM$>vIai\u0007#3Hb/4";
      String string0 = share0.getId();
      assertEquals("bM$>vIai\u0007#3Hb/4", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Share share0 = new Share();
      share0.setId("");
      String string0 = share0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Share share0 = new Share();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      share0.entry = (List<Child>) linkedList0;
      Child child0 = new Child();
      linkedList0.add(child0);
      List<Child> list0 = share0.getEntry();
      assertTrue(list0.contains(child0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Share share0 = new Share();
      share0.setDescription("H \"m%k/#");
      String string0 = share0.getDescription();
      assertEquals("H \"m%k/#", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Share share0 = new Share();
      share0.setDescription("");
      String string0 = share0.getDescription();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Share share0 = new Share();
      share0.getEntry();
      List<Child> list0 = share0.getEntry();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Share share0 = new Share();
      String string0 = share0.getUrl();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Share share0 = new Share();
      share0.setExpires((XMLGregorianCalendar) null);
      assertNull(share0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Share share0 = new Share();
      String string0 = share0.getUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Share share0 = new Share();
      String string0 = share0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Share share0 = new Share();
      String string0 = share0.getDescription();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Share share0 = new Share();
      share0.setLastVisited((XMLGregorianCalendar) null);
      assertNull(share0.getUrl());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Share share0 = new Share();
      XMLGregorianCalendar xMLGregorianCalendar0 = share0.getCreated();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Share share0 = new Share();
      int int0 = share0.getVisitCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Share share0 = new Share();
      share0.setCreated((XMLGregorianCalendar) null);
      assertNull(share0.getUsername());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Share share0 = new Share();
      XMLGregorianCalendar xMLGregorianCalendar0 = share0.getLastVisited();
      assertNull(xMLGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Share share0 = new Share();
      XMLGregorianCalendar xMLGregorianCalendar0 = share0.getExpires();
      assertNull(xMLGregorianCalendar0);
  }
}
