/*
 * This file was automatically generated by EvoSuite
 * Mon Apr 08 14:52:48 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.AudioTrack;
import org.subsonic.restapi.Captions;
import org.subsonic.restapi.VideoConversion;
import org.subsonic.restapi.VideoInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VideoInfo_ESTest extends VideoInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      videoInfo0.setId("ui=N J4WW[5|&~R");
      String string0 = videoInfo0.getId();
      assertEquals("ui=N J4WW[5|&~R", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      videoInfo0.setId("");
      String string0 = videoInfo0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      LinkedList<VideoConversion> linkedList0 = new LinkedList<VideoConversion>();
      videoInfo0.conversion = (List<VideoConversion>) linkedList0;
      VideoConversion videoConversion0 = new VideoConversion();
      linkedList0.add(videoConversion0);
      List<VideoConversion> list0 = videoInfo0.getConversion();
      assertNotNull(list0);
      assertTrue(list0.contains(videoConversion0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      LinkedList<Captions> linkedList0 = new LinkedList<Captions>();
      videoInfo0.captions = (List<Captions>) linkedList0;
      Captions captions0 = new Captions();
      linkedList0.add(captions0);
      List<Captions> list0 = videoInfo0.getCaptions();
      assertTrue(list0.contains(captions0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      LinkedList<AudioTrack> linkedList0 = new LinkedList<AudioTrack>();
      videoInfo0.audioTrack = (List<AudioTrack>) linkedList0;
      AudioTrack audioTrack0 = new AudioTrack();
      linkedList0.add(audioTrack0);
      List<AudioTrack> list0 = videoInfo0.getAudioTrack();
      assertTrue(list0.contains(audioTrack0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      List<VideoConversion> list0 = videoInfo0.getConversion();
      List<VideoConversion> list1 = videoInfo0.getConversion();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      List<AudioTrack> list0 = videoInfo0.getAudioTrack();
      List<AudioTrack> list1 = videoInfo0.getAudioTrack();
      assertSame(list1, list0);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      List<Captions> list0 = videoInfo0.getCaptions();
      List<Captions> list1 = videoInfo0.getCaptions();
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      VideoInfo videoInfo0 = new VideoInfo();
      String string0 = videoInfo0.getId();
      assertNull(string0);
  }
}
