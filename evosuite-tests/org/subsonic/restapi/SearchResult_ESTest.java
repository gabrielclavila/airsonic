/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 11 00:06:06 GMT 2024
 */

package org.subsonic.restapi;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.subsonic.restapi.Child;
import org.subsonic.restapi.SearchResult;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchResult_ESTest extends SearchResult_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      searchResult0.totalHits = 1;
      int int0 = searchResult0.getTotalHits();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      searchResult0.setTotalHits((-1745));
      int int0 = searchResult0.getTotalHits();
      assertEquals((-1745), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      searchResult0.offset = 2264;
      int int0 = searchResult0.getOffset();
      assertEquals(2264, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      searchResult0.setOffset((-1));
      int int0 = searchResult0.getOffset();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      LinkedList<Child> linkedList0 = new LinkedList<Child>();
      Child child0 = new Child();
      linkedList0.add(child0);
      searchResult0.match = (List<Child>) linkedList0;
      List<Child> list0 = searchResult0.getMatch();
      assertTrue(list0.contains(child0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      searchResult0.getMatch();
      List<Child> list0 = searchResult0.getMatch();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      int int0 = searchResult0.getTotalHits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SearchResult searchResult0 = new SearchResult();
      int int0 = searchResult0.getOffset();
      assertEquals(0, int0);
  }
}
