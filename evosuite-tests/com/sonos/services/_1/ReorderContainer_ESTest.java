/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 12 01:45:27 GMT 2024
 */

package com.sonos.services._1;

import org.junit.Test;
import static org.junit.Assert.*;
import com.sonos.services._1.ReorderContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReorderContainer_ESTest extends ReorderContainer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.setUpdateId("#chX~");
      String string0 = reorderContainer0.getUpdateId();
      assertEquals("#chX~", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.updateId = "";
      String string0 = reorderContainer0.getUpdateId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.setTo((-1));
      int int0 = reorderContainer0.getTo();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.id = "k^*9;:!i";
      String string0 = reorderContainer0.getId();
      assertEquals("k^*9;:!i", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.id = "";
      String string0 = reorderContainer0.getId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.setFrom("T");
      String string0 = reorderContainer0.getFrom();
      assertEquals("T", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.from = "";
      String string0 = reorderContainer0.getFrom();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.setTo(1);
      int int0 = reorderContainer0.getTo();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      String string0 = reorderContainer0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      reorderContainer0.setId("");
      assertEquals(0, reorderContainer0.getTo());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      String string0 = reorderContainer0.getFrom();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      int int0 = reorderContainer0.getTo();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ReorderContainer reorderContainer0 = new ReorderContainer();
      String string0 = reorderContainer0.getUpdateId();
      assertNull(string0);
  }
}
