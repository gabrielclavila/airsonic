/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:17:37 GMT 2024
 */

package org.airsonic.player.command;

import org.junit.Test;
import static org.junit.Assert.*;
import java.time.Instant;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.command.PersonalSettingsCommand;
import org.airsonic.player.domain.AlbumListType;
import org.airsonic.player.domain.Avatar;
import org.airsonic.player.domain.Theme;
import org.airsonic.player.domain.User;
import org.airsonic.player.domain.UserSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PersonalSettingsCommand_ESTest extends PersonalSettingsCommand_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setShowNowPlayingEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isShowNowPlayingEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setNowPlayingAllowed(true);
      boolean boolean0 = personalSettingsCommand0.isNowPlayingAllowed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setListenBrainzEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isListenBrainzEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLastFmEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isLastFmEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setKeyboardShortcutsEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isKeyboardShortcutsEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setFinalVersionNotificationEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isFinalVersionNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setBetaVersionNotificationEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isBetaVersionNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setAutoHidePlayQueue(true);
      boolean boolean0 = personalSettingsCommand0.isAutoHidePlayQueue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User((String) null, (String) null, "");
      user0.setUploadRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User((String) null, (String) null, (String) null);
      user0.setStreamRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertEquals(0L, user1.getBytesUploaded());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User("^Kx&xC8%@vw!f", ":OB%I]GDZDV/a", "^Kx&xC8%@vw!f");
      user0.setShareRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isSettingsRole());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User((String) null, (String) null, (String) null, true, (-1446L), (-3000L), (-3000L));
      user0.setPodcastRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isUploadRole());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User("^Kx&xC8%@vw!f", ":OB%I]GDZDV/a", "^Kx&xC8%@vw!f");
      user0.setPlaylistRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertEquals("^Kx&xC8%@vw!f", user1.getEmail());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User((String) null, (String) null, "");
      user0.setJukeboxRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertSame(user1, user0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User("^Kx&xC8%@vw!f", ":OB%I]GDZDV/a", "^Kx&xC8%@vw!f");
      user0.setDownloadRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isPodcastRole());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User("org.airsonic.player.command.PersonalSettingsCommand", "=*n)%T@K[;", "org.airsonic.player.command.PersonalSettingsCommand", true, 609L, (-1959L), (-1923L));
      user0.setCoverArtRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isCommentRole());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User("", "", (String) null, true, 2670L, 2670L, 3309L);
      user0.setCommentRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isJukeboxRole());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = new User((String) null, (String) null, (String) null);
      user0.setAdminRole(true);
      personalSettingsCommand0.setUser(user0);
      User user1 = personalSettingsCommand0.getUser();
      assertFalse(user1.isDownloadRole());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      Theme[] themeArray0 = new Theme[2];
      personalSettingsCommand0.setThemes(themeArray0);
      Theme[] themeArray1 = personalSettingsCommand0.getThemes();
      assertEquals(2, themeArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      Theme[] themeArray0 = new Theme[0];
      personalSettingsCommand0.setThemes(themeArray0);
      Theme[] themeArray1 = personalSettingsCommand0.getThemes();
      assertEquals(0, themeArray1.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setThemeIndex(" [download]");
      String string0 = personalSettingsCommand0.getThemeIndex();
      assertEquals(" [download]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setThemeIndex("");
      String string0 = personalSettingsCommand0.getThemeIndex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      personalSettingsCommand0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getPlaylistVisibility();
      assertSame(userSettings_Visibility1, userSettings_Visibility0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, false, false, false, false, false, false, true, true);
      personalSettingsCommand0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getPlaylistVisibility();
      assertFalse(userSettings_Visibility1.isGenreVisible());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, true, false, false, true, false, false, true, false);
      personalSettingsCommand0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getPlaylistVisibility();
      assertSame(userSettings_Visibility1, userSettings_Visibility0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, false, true, true, true, true, true, true, false);
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getPlaylistVisibility();
      assertFalse(userSettings_Visibility1.isArtistVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setPaginationSize((-1));
      int int0 = personalSettingsCommand0.getPaginationSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, true, true, true, false, true, true, true, true);
      personalSettingsCommand0.setMainVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getMainVisibility();
      assertTrue(userSettings_Visibility1.isFileSizeVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, true, true, true, true, true, false, true, true);
      personalSettingsCommand0.setMainVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getMainVisibility();
      assertTrue(userSettings_Visibility1.isTrackNumberVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      personalSettingsCommand0.setMainVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = personalSettingsCommand0.getMainVisibility();
      assertFalse(userSettings_Visibility1.isGenreVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String[] stringArray0 = new String[8];
      personalSettingsCommand0.setLocales(stringArray0);
      String[] stringArray1 = personalSettingsCommand0.getLocales();
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String[] stringArray0 = new String[0];
      personalSettingsCommand0.setLocales(stringArray0);
      String[] stringArray1 = personalSettingsCommand0.getLocales();
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLocaleIndex("]]+qAc8T.;-IM^");
      String string0 = personalSettingsCommand0.getLocaleIndex();
      assertEquals("]]+qAc8T.;-IM^", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLocaleIndex("");
      String string0 = personalSettingsCommand0.getLocaleIndex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setListenBrainzToken("Nn))==MjhW\"B$TllEwy");
      String string0 = personalSettingsCommand0.getListenBrainzToken();
      assertEquals("Nn))==MjhW\"B$TllEwy", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setListenBrainzToken("");
      String string0 = personalSettingsCommand0.getListenBrainzToken();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLastFmUsername("+|`#MS*TQ/");
      String string0 = personalSettingsCommand0.getLastFmUsername();
      assertEquals("+|`#MS*TQ/", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLastFmUsername("");
      String string0 = personalSettingsCommand0.getLastFmUsername();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLastFmPassword("org.airsonic.player.domain.UserSettings");
      String string0 = personalSettingsCommand0.getLastFmPassword();
      assertEquals("org.airsonic.player.domain.UserSettings", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setLastFmPassword("");
      String string0 = personalSettingsCommand0.getLastFmPassword();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      MockDate mockDate0 = new MockDate();
      byte[] byteArray0 = new byte[8];
      Avatar avatar0 = new Avatar(0, "", mockDate0, (String) null, 7, 7, byteArray0);
      personalSettingsCommand0.setCustomAvatar(avatar0);
      Avatar avatar1 = personalSettingsCommand0.getCustomAvatar();
      assertEquals(7, avatar1.getWidth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      Instant instant0 = MockInstant.ofEpochMilli(1607);
      Date date0 = Date.from(instant0);
      Avatar avatar0 = new Avatar(1607, (String) null, date0, (String) null, 1607, 0, (byte[]) null);
      personalSettingsCommand0.setCustomAvatar(avatar0);
      Avatar avatar1 = personalSettingsCommand0.getCustomAvatar();
      assertSame(avatar1, avatar0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      MockDate mockDate0 = new MockDate((-990));
      Avatar avatar0 = new Avatar((-990), "", mockDate0, "", 0, 111, (byte[]) null);
      personalSettingsCommand0.setCustomAvatar(avatar0);
      Avatar avatar1 = personalSettingsCommand0.getCustomAvatar();
      assertEquals("", avatar1.getName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      MockDate mockDate0 = new MockDate(1, 6, (-1398), (-343), 1, (-805));
      byte[] byteArray0 = new byte[6];
      Avatar avatar0 = new Avatar((-343), " [jukebox]", mockDate0, "", (-1398), (-87), byteArray0);
      personalSettingsCommand0.setCustomAvatar(avatar0);
      Avatar avatar1 = personalSettingsCommand0.getCustomAvatar();
      assertEquals((-343), avatar1.getId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      LinkedList<Avatar> linkedList0 = new LinkedList<Avatar>();
      linkedList0.add((Avatar) null);
      personalSettingsCommand0.setAvatars(linkedList0);
      List<Avatar> list0 = personalSettingsCommand0.getAvatars();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setAvatarId(1596);
      int int0 = personalSettingsCommand0.getAvatarId();
      assertEquals(1596, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setAvatarId((-118));
      int int0 = personalSettingsCommand0.getAvatarId();
      assertEquals((-118), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      AlbumListType[] albumListTypeArray0 = new AlbumListType[5];
      personalSettingsCommand0.setAlbumLists(albumListTypeArray0);
      AlbumListType[] albumListTypeArray1 = personalSettingsCommand0.getAlbumLists();
      assertSame(albumListTypeArray1, albumListTypeArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      AlbumListType[] albumListTypeArray0 = new AlbumListType[0];
      personalSettingsCommand0.setAlbumLists(albumListTypeArray0);
      AlbumListType[] albumListTypeArray1 = personalSettingsCommand0.getAlbumLists();
      assertSame(albumListTypeArray1, albumListTypeArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setAlbumListId("");
      String string0 = personalSettingsCommand0.getAlbumListId();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isNowPlayingAllowed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setShowArtistInfoEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isShowArtistInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setAlbumListId("0n");
      String string0 = personalSettingsCommand0.getAlbumListId();
      assertEquals("0n", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      LinkedList<Avatar> linkedList0 = new LinkedList<Avatar>();
      personalSettingsCommand0.setAvatars(linkedList0);
      List<Avatar> list0 = personalSettingsCommand0.getAvatars();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isLastFmEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isPartyModeEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getLastFmUsername();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isShowArtistInfoEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getAlbumListId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      Theme[] themeArray0 = personalSettingsCommand0.getThemes();
      assertNull(themeArray0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isListenBrainzEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      User user0 = personalSettingsCommand0.getUser();
      assertNull(user0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = personalSettingsCommand0.getMainVisibility();
      assertNull(userSettings_Visibility0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      Avatar avatar0 = personalSettingsCommand0.getCustomAvatar();
      assertNull(avatar0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getThemeIndex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setPaginationSize(237);
      int int0 = personalSettingsCommand0.getPaginationSize();
      assertEquals(237, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isBetaVersionNotificationEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isFinalVersionNotificationEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getLastFmPassword();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isKeyboardShortcutsEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isAutoHidePlayQueue();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      AlbumListType[] albumListTypeArray0 = personalSettingsCommand0.getAlbumLists();
      assertNull(albumListTypeArray0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getListenBrainzToken();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      UserSettings.Visibility userSettings_Visibility0 = personalSettingsCommand0.getPlaylistVisibility();
      assertNull(userSettings_Visibility0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isSongNotificationEnabled();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setQueueFollowingSongs(true);
      boolean boolean0 = personalSettingsCommand0.isQueueFollowingSongs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String[] stringArray0 = personalSettingsCommand0.getLocales();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      int int0 = personalSettingsCommand0.getPaginationSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isQueueFollowingSongs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setPartyModeEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isPartyModeEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      List<Avatar> list0 = personalSettingsCommand0.getAvatars();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      personalSettingsCommand0.setSongNotificationEnabled(true);
      boolean boolean0 = personalSettingsCommand0.isSongNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      int int0 = personalSettingsCommand0.getAvatarId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      String string0 = personalSettingsCommand0.getLocaleIndex();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PersonalSettingsCommand personalSettingsCommand0 = new PersonalSettingsCommand();
      boolean boolean0 = personalSettingsCommand0.isShowNowPlayingEnabled();
      assertFalse(boolean0);
  }
}
