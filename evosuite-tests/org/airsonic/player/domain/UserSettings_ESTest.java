/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:08:53 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.Locale;
import org.airsonic.player.domain.AlbumListType;
import org.airsonic.player.domain.AvatarScheme;
import org.airsonic.player.domain.TranscodeScheme;
import org.airsonic.player.domain.UserSettings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserSettings_ESTest extends UserSettings_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, true, true, true, false, false, true, false, true);
      assertTrue(userSettings_Visibility0.isTrackNumberVisible());
      assertFalse(userSettings_Visibility0.isBitRateVisible());
      assertTrue(userSettings_Visibility0.isFileSizeVisible());
      assertTrue(userSettings_Visibility0.isAlbumVisible());
      assertTrue(userSettings_Visibility0.isGenreVisible());
      assertFalse(userSettings_Visibility0.isFormatVisible());
      assertFalse(userSettings_Visibility0.isYearVisible());
      assertTrue(userSettings_Visibility0.isArtistVisible());
      assertTrue(userSettings_Visibility0.isDurationVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, false, true, false, true, true, true, false, false);
      assertTrue(userSettings_Visibility0.isAlbumVisible());
      assertFalse(userSettings_Visibility0.isFormatVisible());
      assertFalse(userSettings_Visibility0.isArtistVisible());
      assertFalse(userSettings_Visibility0.isFileSizeVisible());
      assertTrue(userSettings_Visibility0.isDurationVisible());
      assertTrue(userSettings_Visibility0.isBitRateVisible());
      assertTrue(userSettings_Visibility0.isYearVisible());
      assertTrue(userSettings_Visibility0.isTrackNumberVisible());
      assertFalse(userSettings_Visibility0.isGenreVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, false, false, true, false, false, false, false, false);
      assertFalse(userSettings_Visibility0.isFormatVisible());
      assertFalse(userSettings_Visibility0.isAlbumVisible());
      assertFalse(userSettings_Visibility0.isFileSizeVisible());
      assertTrue(userSettings_Visibility0.isGenreVisible());
      assertFalse(userSettings_Visibility0.isBitRateVisible());
      assertFalse(userSettings_Visibility0.isArtistVisible());
      assertFalse(userSettings_Visibility0.isDurationVisible());
      assertFalse(userSettings_Visibility0.isYearVisible());
      assertTrue(userSettings_Visibility0.isTrackNumberVisible());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.setViewAsList(true);
      boolean boolean0 = userSettings0.isViewAsList();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.AlbumListType");
      userSettings0.setSongNotificationEnabled(true);
      boolean boolean0 = userSettings0.isSongNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.setShowSideBar(true);
      boolean boolean0 = userSettings0.isShowSideBar();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings");
      userSettings0.setShowNowPlayingEnabled(true);
      boolean boolean0 = userSettings0.isShowNowPlayingEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.setShowArtistInfoEnabled(true);
      boolean boolean0 = userSettings0.isShowArtistInfoEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("O}>To2+!");
      userSettings0.setQueueFollowingSongs(true);
      boolean boolean0 = userSettings0.isQueueFollowingSongs();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("jV,08I");
      userSettings0.setPartyModeEnabled(true);
      boolean boolean0 = userSettings0.isPartyModeEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.AlbumListType");
      userSettings0.setNowPlayingAllowed(true);
      boolean boolean0 = userSettings0.isNowPlayingAllowed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("dK/OQM:7TB!9");
      userSettings0.setListenBrainzEnabled(true);
      boolean boolean0 = userSettings0.isListenBrainzEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("pY4EpW9y$");
      userSettings0.setLastFmEnabled(true);
      boolean boolean0 = userSettings0.isLastFmEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setKeyboardShortcutsEnabled(true);
      boolean boolean0 = userSettings0.isKeyboardShortcutsEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("-<sdXZA");
      userSettings0.setBetaVersionNotificationEnabled(true);
      boolean boolean0 = userSettings0.isBetaVersionNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setAutoHidePlayQueue(true);
      boolean boolean0 = userSettings0.isAutoHidePlayQueue();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.getUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("e_sB~kX+#$78bYN4.");
      userSettings0.getUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("HDXM~~51+i");
      TranscodeScheme transcodeScheme0 = TranscodeScheme.MAX_96;
      userSettings0.setTranscodeScheme(transcodeScheme0);
      userSettings0.getTranscodeScheme();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("<'rL9:pSG8i7'");
      userSettings0.setThemeId("WD6h]tZ");
      userSettings0.getThemeId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings");
      userSettings0.setThemeId("");
      userSettings0.getThemeId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("<'rL9:pSG8i7'");
      Integer integer0 = Integer.getInteger("WD6h]tZ", 0);
      userSettings0.setSystemAvatarId(integer0);
      userSettings0.getSystemAvatarId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      Integer integer0 = new Integer(12);
      userSettings0.setSystemAvatarId(integer0);
      userSettings0.getSystemAvatarId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings$Visibility");
      Integer integer0 = new Integer((-532));
      userSettings0.setSystemAvatarId(integer0);
      userSettings0.getSystemAvatarId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
      
      userSettings0.setSelectedMusicFolderId(0);
      int int0 = userSettings0.getSelectedMusicFolderId();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings$Visibility");
      userSettings0.setSelectedMusicFolderId(1466);
      int int0 = userSettings0.getSelectedMusicFolderId();
      assertEquals(1466, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.setPlaylistVisibility((UserSettings.Visibility) null);
      userSettings0.getPlaylistVisibility();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.setYearVisible(true);
      assertTrue(userSettings_Visibility0.isYearVisible());
      
      userSettings0.getPlaylistVisibility();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("e_sB~kX+#$78bYN4.");
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(true, true, true, true, false, false, true, false, false);
      userSettings0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getPlaylistVisibility();
      assertFalse(userSettings_Visibility1.isYearVisible());
      assertFalse(userSettings_Visibility1.isBitRateVisible());
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
      assertFalse(userSettings_Visibility1.isFormatVisible());
      assertTrue(userSettings_Visibility1.isAlbumVisible());
      assertTrue(userSettings_Visibility1.isTrackNumberVisible());
      assertTrue(userSettings_Visibility1.isArtistVisible());
      assertTrue(userSettings_Visibility1.isDurationVisible());
      assertFalse(userSettings_Visibility1.isFileSizeVisible());
      assertTrue(userSettings_Visibility1.isGenreVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings$Visibility");
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, true, true, true, false, true, true, true, true);
      userSettings0.setPlaylistVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getPlaylistVisibility();
      assertTrue(userSettings_Visibility1.isFormatVisible());
      assertFalse(userSettings_Visibility1.isYearVisible());
      assertTrue(userSettings_Visibility1.isFileSizeVisible());
      assertTrue(userSettings_Visibility1.isAlbumVisible());
      assertTrue(userSettings_Visibility1.isArtistVisible());
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
      assertTrue(userSettings_Visibility1.isGenreVisible());
      assertFalse(userSettings_Visibility1.isTrackNumberVisible());
      assertTrue(userSettings_Visibility1.isBitRateVisible());
      assertTrue(userSettings_Visibility1.isDurationVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.setArtistVisible(true);
      assertTrue(userSettings_Visibility0.isArtistVisible());
      
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getPlaylistVisibility();
      assertTrue(userSettings_Visibility1.isArtistVisible());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.setAlbumVisible(true);
      assertTrue(userSettings_Visibility0.isAlbumVisible());
      
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getPlaylistVisibility();
      assertTrue(userSettings_Visibility1.isAlbumVisible());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setPaginationSize(15);
      int int0 = userSettings0.getPaginationSize();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings((String) null);
      userSettings0.setPaginationSize((-1));
      int int0 = userSettings0.getPaginationSize();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings(",U@poP#aNnYZ.");
      userSettings0.setMainVisibility((UserSettings.Visibility) null);
      userSettings0.getMainVisibility();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("xZcP}p@");
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      userSettings_Visibility0.setTrackNumberVisible(true);
      userSettings0.setMainVisibility(userSettings_Visibility0);
      assertTrue(userSettings_Visibility0.isTrackNumberVisible());
      
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getMainVisibility();
      assertTrue(userSettings_Visibility1.isTrackNumberVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings$Visibility");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getMainVisibility();
      userSettings_Visibility0.setDurationVisible(true);
      assertTrue(userSettings_Visibility0.isDurationVisible());
      
      userSettings0.getMainVisibility();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, true, true, true, true, true, false, true, true);
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setMainVisibility(userSettings_Visibility0);
      UserSettings.Visibility userSettings_Visibility1 = userSettings0.getMainVisibility();
      assertFalse(userSettings_Visibility1.isTrackNumberVisible());
      assertTrue(userSettings_Visibility1.isFormatVisible());
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
      assertFalse(userSettings_Visibility1.isDurationVisible());
      assertTrue(userSettings_Visibility1.isYearVisible());
      assertTrue(userSettings_Visibility1.isGenreVisible());
      assertTrue(userSettings_Visibility1.isAlbumVisible());
      assertTrue(userSettings_Visibility1.isFileSizeVisible());
      assertTrue(userSettings_Visibility1.isArtistVisible());
      assertTrue(userSettings_Visibility1.isBitRateVisible());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.AlbumListType");
      Locale locale0 = Locale.CHINESE;
      userSettings0.setLocale(locale0);
      userSettings0.getLocale();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setListenBrainzToken("MAX_128");
      userSettings0.getListenBrainzToken();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("org.airsonic.player.domain.UserSettings$Visibility");
      userSettings0.setLastFmUsername("org.airsonic.player.domain.UserSettings$Visibility");
      userSettings0.getLastFmUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setLastFmUsername("");
      userSettings0.getLastFmUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setLastFmPassword("txGW");
      userSettings0.getLastFmPassword();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setLastFmPassword("");
      userSettings0.getLastFmPassword();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("dX}#");
      userSettings0.setChanged((Date) null);
      userSettings0.getChanged();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setAvatarScheme((AvatarScheme) null);
      userSettings0.getAvatarScheme();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("[!X+@GIdR=RVI.F_=K");
      AvatarScheme avatarScheme0 = AvatarScheme.SYSTEM;
      userSettings0.setAvatarScheme(avatarScheme0);
      userSettings0.getAvatarScheme();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.isShowNowPlayingEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getChanged();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      userSettings0.isAutoHidePlayQueue();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getThemeId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("+JI|+X=NqE");
      userSettings0.isFinalVersionNotificationEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getLastFmUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("+JI|+X=NqE");
      int int0 = userSettings0.getPaginationSize();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      userSettings0.getListenBrainzToken();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getTranscodeScheme();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      userSettings0.isShowSideBar();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getAvatarScheme();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      userSettings0.setUsername("NM.7'th7iZ(8nU#\"m");
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setListenBrainzToken("");
      userSettings0.getListenBrainzToken();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.isListenBrainzEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("}_H(89:#Hq");
      int int0 = userSettings0.getSelectedMusicFolderId();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      AlbumListType albumListType0 = AlbumListType.GENRE;
      userSettings0.setDefaultAlbumList(albumListType0);
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.setFinalVersionNotificationEnabled(true);
      boolean boolean0 = userSettings0.isFinalVersionNotificationEnabled();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getSystemAvatarId();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("+JI|+X=NqE");
      userSettings0.isBetaVersionNotificationEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getDefaultAlbumList();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("+JI|+X=NqE");
      userSettings0.isPartyModeEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("+JI|+X=NqE");
      userSettings0.isNowPlayingAllowed();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.isKeyboardShortcutsEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.isViewAsList();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getLocale();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      userSettings0.isSongNotificationEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      userSettings0.isShowArtistInfoEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("}_H(89:#Hq");
      userSettings0.isLastFmEnabled();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.getUsername();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      userSettings0.isQueueFollowingSongs();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      userSettings0.getLastFmPassword();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.isGenreVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      userSettings_Visibility0.setFormatVisible(true);
      assertTrue(userSettings_Visibility0.isFormatVisible());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("|h4:`0GB0d[h");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getMainVisibility();
      userSettings_Visibility0.isAlbumVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("|h4:`0GB0d[h");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getMainVisibility();
      userSettings_Visibility0.isFileSizeVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      boolean boolean0 = userSettings_Visibility0.isArtistVisible();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.setBitRateVisible(true);
      assertTrue(userSettings_Visibility0.isBitRateVisible());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.isTrackNumberVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("RANDM");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getMainVisibility();
      userSettings_Visibility0.isFormatVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility();
      userSettings_Visibility0.setFileSizeVisible(false);
      assertFalse(userSettings_Visibility0.isFileSizeVisible());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("NM.7'th7iZ(8nU#\"m");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.isDurationVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("g:^]'+fg,?VY?\"h-dLY");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.setGenreVisible(true);
      assertTrue(userSettings_Visibility0.isGenreVisible());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      UserSettings userSettings0 = new UserSettings("");
      UserSettings.Visibility userSettings_Visibility0 = userSettings0.getPlaylistVisibility();
      userSettings_Visibility0.isBitRateVisible();
      assertEquals((-1), userSettings0.getSelectedMusicFolderId());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      UserSettings.Visibility userSettings_Visibility0 = new UserSettings.Visibility(false, false, false, false, false, false, false, false, false);
      boolean boolean0 = userSettings_Visibility0.isYearVisible();
      assertFalse(userSettings_Visibility0.isFormatVisible());
      assertFalse(userSettings_Visibility0.isGenreVisible());
      assertFalse(boolean0);
      assertFalse(userSettings_Visibility0.isArtistVisible());
      assertFalse(userSettings_Visibility0.isTrackNumberVisible());
      assertFalse(userSettings_Visibility0.isFileSizeVisible());
      assertFalse(userSettings_Visibility0.isDurationVisible());
      assertFalse(userSettings_Visibility0.isBitRateVisible());
      assertFalse(userSettings_Visibility0.isAlbumVisible());
  }
}
