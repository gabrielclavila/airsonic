/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 20:28:50 GMT 2024
 */

package org.airsonic.player.ajax;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.airsonic.player.ajax.ArtistInfo;
import org.airsonic.player.ajax.SimilarArtist;
import org.airsonic.player.ajax.TopSong;
import org.airsonic.player.domain.ArtistBio;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArtistInfo_ESTest extends ArtistInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<SimilarArtist> linkedList0 = new LinkedList<SimilarArtist>();
      ArtistBio artistBio0 = new ArtistBio("", "", "", "org.airsonic.player.ajax.ArtistInfo", "org.airsonic.player.ajax.ArtistInfo", "qr~c5");
      ArtistInfo artistInfo0 = new ArtistInfo(linkedList0, artistBio0, (List<TopSong>) null);
      List<TopSong> list0 = artistInfo0.getTopSongs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<TopSong> linkedList0 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo((List<SimilarArtist>) null, (ArtistBio) null, linkedList0);
      TopSong topSong0 = new TopSong(1, "", (String) null, "", "Zj?!G`tne", false);
      linkedList0.add(topSong0);
      List<TopSong> list0 = artistInfo0.getTopSongs();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<TopSong> linkedList0 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo((List<SimilarArtist>) null, (ArtistBio) null, linkedList0);
      List<SimilarArtist> list0 = artistInfo0.getSimilarArtists();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<SimilarArtist> linkedList0 = new LinkedList<SimilarArtist>();
      ArtistBio artistBio0 = new ArtistBio("8Ts7F", "8Ts7F", "8Ts7F", "8Ts7F", "8Ts7F", "x$`9C");
      LinkedList<TopSong> linkedList1 = new LinkedList<TopSong>();
      SimilarArtist similarArtist0 = new SimilarArtist(320, "x$`9C");
      linkedList0.add(similarArtist0);
      ArtistInfo artistInfo0 = new ArtistInfo(linkedList0, artistBio0, linkedList1);
      List<SimilarArtist> list0 = artistInfo0.getSimilarArtists();
      assertTrue(list0.contains(similarArtist0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedList<SimilarArtist> linkedList0 = new LinkedList<SimilarArtist>();
      ArtistBio artistBio0 = new ArtistBio("8Ts7F", "8Ts7F", "8Ts7F", "8Ts7F", "8Ts7F", "x$`9C");
      LinkedList<TopSong> linkedList1 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo(linkedList0, artistBio0, linkedList1);
      ArtistBio artistBio1 = artistInfo0.getArtistBio();
      assertEquals("8Ts7F", artistBio1.getLastFmUrl());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<TopSong> linkedList0 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo((List<SimilarArtist>) null, (ArtistBio) null, linkedList0);
      List<TopSong> list0 = artistInfo0.getTopSongs();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<SimilarArtist> linkedList0 = new LinkedList<SimilarArtist>();
      LinkedList<TopSong> linkedList1 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo(linkedList0, (ArtistBio) null, linkedList1);
      ArtistBio artistBio0 = artistInfo0.getArtistBio();
      assertNull(artistBio0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedList<SimilarArtist> linkedList0 = new LinkedList<SimilarArtist>();
      ArtistBio artistBio0 = new ArtistBio("", "", "", "", "", "");
      LinkedList<TopSong> linkedList1 = new LinkedList<TopSong>();
      ArtistInfo artistInfo0 = new ArtistInfo(linkedList0, artistBio0, linkedList1);
      List<SimilarArtist> list0 = artistInfo0.getSimilarArtists();
      assertTrue(list0.isEmpty());
  }
}
