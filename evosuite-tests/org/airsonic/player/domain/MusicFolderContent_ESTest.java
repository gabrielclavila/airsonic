/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 06 21:02:02 GMT 2024
 */

package org.airsonic.player.domain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.text.Collator;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.function.ToLongFunction;
import org.airsonic.player.domain.MediaFile;
import org.airsonic.player.domain.MusicFolderContent;
import org.airsonic.player.domain.MusicIndex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MusicFolderContent_ESTest extends MusicFolderContent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<MusicIndex> comparator0 = Comparator.comparingLong((ToLongFunction<? super MusicIndex>) toLongFunction0);
      TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> treeMap0 = new TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>(comparator0);
      MusicFolderContent musicFolderContent0 = new MusicFolderContent(treeMap0, (List<MediaFile>) null);
      List<MediaFile> list0 = musicFolderContent0.getSingleSongs();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> treeMap0 = new TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>();
      Collator collator0 = Collator.getInstance();
      MusicIndex.SortableArtistWithMediaFiles musicIndex_SortableArtistWithMediaFiles0 = new MusicIndex.SortableArtistWithMediaFiles("", "k m:<N^", collator0);
      List<MediaFile> list0 = musicIndex_SortableArtistWithMediaFiles0.getMediaFiles();
      MusicFolderContent musicFolderContent0 = new MusicFolderContent(treeMap0, list0);
      List<MediaFile> list1 = musicFolderContent0.getSingleSongs();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> treeMap0 = new TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>();
      Collator collator0 = Collator.getInstance();
      MusicIndex.SortableArtistWithMediaFiles musicIndex_SortableArtistWithMediaFiles0 = new MusicIndex.SortableArtistWithMediaFiles("", "k m:<N^", collator0);
      List<MediaFile> list0 = musicIndex_SortableArtistWithMediaFiles0.getMediaFiles();
      MusicFolderContent musicFolderContent0 = new MusicFolderContent(treeMap0, list0);
      MediaFile mediaFile0 = new MediaFile();
      musicIndex_SortableArtistWithMediaFiles0.addMediaFile(mediaFile0);
      musicFolderContent0.getSingleSongs();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<MediaFile> linkedList0 = new LinkedList<MediaFile>();
      MusicFolderContent musicFolderContent0 = new MusicFolderContent((SortedMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>) null, linkedList0);
      SortedMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> sortedMap0 = musicFolderContent0.getIndexedArtists();
      assertNull(sortedMap0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(toLongFunction0).applyAsLong(any());
      Comparator<MusicIndex> comparator0 = Comparator.comparingLong((ToLongFunction<? super MusicIndex>) toLongFunction0);
      TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> treeMap0 = new TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>(comparator0);
      MusicFolderContent musicFolderContent0 = new MusicFolderContent(treeMap0, (List<MediaFile>) null);
      MusicIndex musicIndex0 = new MusicIndex("");
      LinkedList<MusicIndex.SortableArtistWithMediaFiles> linkedList0 = new LinkedList<MusicIndex.SortableArtistWithMediaFiles>();
      treeMap0.put(musicIndex0, linkedList0);
      SortedMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> sortedMap0 = musicFolderContent0.getIndexedArtists();
      assertFalse(sortedMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> treeMap0 = new TreeMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>>();
      LinkedList<MediaFile> linkedList0 = new LinkedList<MediaFile>();
      MusicFolderContent musicFolderContent0 = new MusicFolderContent(treeMap0, linkedList0);
      SortedMap<MusicIndex, List<MusicIndex.SortableArtistWithMediaFiles>> sortedMap0 = musicFolderContent0.getIndexedArtists();
      assertTrue(sortedMap0.isEmpty());
  }
}
