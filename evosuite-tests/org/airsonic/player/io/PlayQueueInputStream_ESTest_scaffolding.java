/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Apr 06 20:14:07 GMT 2024
 */

package org.airsonic.player.io;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class PlayQueueInputStream_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.airsonic.player.io.PlayQueueInputStream"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/home/iartes/Downloads/airsonic-master"); 
    java.lang.System.setProperty("user.home", "/home/iartes"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "iartes"); 
    java.lang.System.setProperty("user.timezone", "America/Manaus"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PlayQueueInputStream_ESTest_scaffolding.class.getClassLoader() ,
      "org.airsonic.player.service.SearchService",
      "org.airsonic.player.service.PlayerService",
      "org.airsonic.player.util.FileUtil$3",
      "org.airsonic.player.util.FileUtil$4",
      "org.airsonic.player.util.FileUtil$1",
      "org.airsonic.player.util.FileUtil$2",
      "org.airsonic.player.domain.UserSettings$Visibility",
      "org.airsonic.player.dao.TranscodingDao",
      "org.airsonic.player.service.ApacheCommonsConfigurationService",
      "org.airsonic.player.util.FileUtil$5",
      "org.airsonic.player.util.FileUtil$6",
      "org.airsonic.player.domain.InternetRadio",
      "org.airsonic.player.domain.Transcoding",
      "org.airsonic.player.domain.ParamSearchResult",
      "org.airsonic.player.service.TranscodingService",
      "org.airsonic.player.domain.RandomSearchCriteria",
      "org.airsonic.player.io.TranscodeInputStream",
      "org.airsonic.player.domain.MusicFolder",
      "org.airsonic.player.dao.AbstractDao",
      "org.airsonic.player.service.MediaFileService",
      "org.airsonic.player.spring.DataSourceConfigType",
      "org.airsonic.player.domain.PlayQueue$SortOrder",
      "org.airsonic.player.service.SettingsService",
      "org.airsonic.player.domain.TranscodeScheme",
      "org.airsonic.player.domain.PlayerTechnology",
      "org.airsonic.player.service.TranscodingService$Parameters",
      "org.airsonic.player.domain.MediaFile",
      "org.airsonic.player.dao.AvatarDao",
      "org.airsonic.player.domain.VideoTranscodingSettings",
      "org.airsonic.player.domain.SearchResult",
      "org.airsonic.player.domain.UserSettings",
      "org.airsonic.player.domain.Player",
      "org.airsonic.player.domain.SearchCriteria",
      "org.airsonic.player.util.Util",
      "org.airsonic.player.service.AudioScrobblerService",
      "org.airsonic.player.domain.AlbumListType",
      "org.airsonic.player.domain.AvatarScheme",
      "org.airsonic.player.dao.MusicFolderDao",
      "org.airsonic.player.domain.PlayQueue$Status",
      "org.airsonic.player.domain.Album",
      "org.airsonic.player.domain.Theme",
      "org.airsonic.player.dao.InternetRadioDao",
      "org.airsonic.player.domain.MediaFile$MediaType",
      "org.airsonic.player.util.FileUtil$FileTask",
      "org.airsonic.player.domain.TransferStatus",
      "org.airsonic.player.util.FileUtil",
      "org.airsonic.player.dao.MediaFileDao",
      "org.airsonic.player.service.search.IndexType",
      "org.airsonic.player.dao.UserDao",
      "org.airsonic.player.domain.PlayQueue",
      "org.airsonic.player.io.PlayQueueInputStream",
      "org.airsonic.player.domain.Avatar"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("org.airsonic.player.service.SearchService", false, PlayQueueInputStream_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PlayQueueInputStream_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.airsonic.player.io.PlayQueueInputStream",
      "org.airsonic.player.domain.PlayQueue$Status",
      "org.airsonic.player.domain.Player",
      "org.airsonic.player.domain.TranscodeScheme",
      "org.airsonic.player.domain.TransferStatus",
      "org.airsonic.player.domain.VideoTranscodingSettings",
      "org.airsonic.player.service.TranscodingService",
      "org.airsonic.player.service.AudioScrobblerService",
      "org.airsonic.player.service.MediaFileService",
      "org.airsonic.player.service.SettingsService",
      "org.airsonic.player.domain.MediaFile",
      "org.airsonic.player.domain.PlayQueue",
      "org.airsonic.player.service.TranscodingService$Parameters",
      "org.airsonic.player.domain.UserSettings",
      "org.airsonic.player.domain.AlbumListType",
      "org.airsonic.player.domain.UserSettings$Visibility",
      "org.airsonic.player.domain.AvatarScheme",
      "org.airsonic.player.domain.Transcoding",
      "org.airsonic.player.domain.InternetRadio",
      "org.airsonic.player.domain.RandomSearchCriteria",
      "org.airsonic.player.domain.MusicFolder",
      "org.airsonic.player.util.FileUtil",
      "org.airsonic.player.util.FileUtil$FileTask",
      "org.airsonic.player.util.FileUtil$3",
      "org.airsonic.player.domain.PlayerTechnology"
    );
  }
}
